{
  "address": "0x3B4Dac141F28E7b3b69841dccc4ae5f534417BFe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockCreated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "NewLaunchpad",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "listing",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "NewPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "WhiteList",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_whiteList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        }
      ],
      "name": "addWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_poolURL",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_poolTitle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_poolDescription",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmountToPreSale",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_softCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_scaleFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isWhiteList",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_finished",
          "type": "bool"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "finalizePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idoTitle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "string",
          "name": "poolURL",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "poolTitle",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "poolDescription",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountToPreSale",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "softCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hardCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaleFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minContribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isWhiteList",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "finished",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolsSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        }
      ],
      "name": "setTitle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "startPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "stopPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x55eb460d38d6bb8476a58fe6958cea77cbeac174d7cbae832b5d39bceb50f312",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB822F3a12459De177b30BfCA6e15C0ceEb50ba83",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "1940832",
    "logsBloom": "0x00000000000000000000000000000040000200000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000005000000000000000000000000000000001000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000080020000000000000000000000000000",
    "blockHash": "0x3a0078f7cd696ffab7662221f45d05ea62c76e780c212a308420c802f76f2e52",
    "transactionHash": "0x55eb460d38d6bb8476a58fe6958cea77cbeac174d7cbae832b5d39bceb50f312",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 46060718,
        "transactionHash": "0x55eb460d38d6bb8476a58fe6958cea77cbeac174d7cbae832b5d39bceb50f312",
        "address": "0x3B4Dac141F28E7b3b69841dccc4ae5f534417BFe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x3a0078f7cd696ffab7662221f45d05ea62c76e780c212a308420c802f76f2e52"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 46060718,
        "transactionHash": "0x55eb460d38d6bb8476a58fe6958cea77cbeac174d7cbae832b5d39bceb50f312",
        "address": "0x3B4Dac141F28E7b3b69841dccc4ae5f534417BFe",
        "topics": [
          "0xd6dfb19b926edb43e8baa6b90ca94e4ad9f9757d0f5d1749efb23c43e7d31213"
        ],
        "data": "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c0000000000000000000000003b4dac141f28e7b3b69841dccc4ae5f534417bfe00000000000000000000000000000000000000000000000000000000674a01990000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 9,
        "blockHash": "0x3a0078f7cd696ffab7662221f45d05ea62c76e780c212a308420c802f76f2e52"
      }
    ],
    "blockNumber": 46060718,
    "cumulativeGasUsed": "2392051",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Test Title"
  ],
  "numDeployments": 2,
  "solcInputHash": "6ae95231dcab7c20cd1798a0291887e0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockCreated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"NewLaunchpad\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"listing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WhiteList\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_whiteList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_poolURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_poolTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_poolDescription\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmountToPreSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_scaleFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_finished\",\"type\":\"bool\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"finalizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"poolURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolTitle\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolDescription\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountToPreSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaleFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minContribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWhiteList\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"setTitle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"startPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stopPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Launchpad.sol\":\"Launchpad\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Launchpad.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Launchpad is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    struct Pool {\\r\\n        string poolURL;\\r\\n        string poolTitle;\\r\\n        string poolDescription;\\r\\n        IERC20 token;\\r\\n        uint256 tokenAmountToPreSale;\\r\\n        uint256 softCap;\\r\\n        uint256 hardCap;\\r\\n        uint256 price;\\r\\n        uint256 scaleFactor;\\r\\n        uint256 maxContribution;\\r\\n        uint256 minContribution;\\r\\n        uint256 startTime;\\r\\n        uint256 endTime;\\r\\n        bool isWhiteList;\\r\\n        bool enabled;\\r\\n        bool finished;\\r\\n    }\\r\\n\\r\\n    uint32 private constant sweepBuffer = 86400;  //waiting period for sweep\\r\\n    uint256 private constant minSpan = 86400;\\r\\n\\r\\n    string public idoTitle;\\r\\n\\r\\n    Pool[] public pools;\\r\\n    mapping(uint256 => uint256) public poolsSold;\\r\\n    mapping(uint256 => mapping(address => uint256)) public lockedTokens;\\r\\n    mapping(uint256 => mapping(address => uint256)) public whiteList;\\r\\n\\r\\n    event NewLaunchpad(address creator, address instance, uint256 blockCreated, uint version);\\r\\n    event NewPool(address owner, address listing, uint256 id);\\r\\n    event Swap(uint256 id, uint256 roundID, address sender, uint256 amount, uint256 amt);\\r\\n    event Claim(uint256 id, address claimer, uint256 amount);\\r\\n    event PoolFinished(uint256 id);\\r\\n    event PoolStarted(uint256 id);\\r\\n    event WhiteList(uint256 id);\\r\\n\\r\\n    constructor(string memory _title) Ownable(_msgSender()) {\\r\\n        idoTitle = _title;\\r\\n        emit NewLaunchpad(_msgSender(), address(this), block.timestamp, uint(0));\\r\\n    }\\r\\n\\r\\n    modifier onlyPreLaunch(uint256 _id) {\\r\\n        if (_isPreSaleDisabled(_id)) {\\r\\n            require(!pools[_id].enabled, \\\"Pool is already enabled\\\");\\r\\n            require(!pools[_id].finished, \\\"Pool is already completed\\\");\\r\\n        } else {\\r\\n            require(block.timestamp < pools[_id].startTime, \\\"Pool start time has passed\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //validators\\r\\n    function _isPreSaleDisabled(uint256 _id) internal view returns (bool){\\r\\n        return (pools[_id].startTime == 0 && pools[_id].endTime == 0);\\r\\n    }\\r\\n\\r\\n    //setters\\r\\n    function setStartTime(uint256 _id, uint256 _startTime) external onlyOwner onlyPreLaunch(_id) {\\r\\n        if (_startTime > 0) {\\r\\n            require(_startTime > block.timestamp, \\\"Start time must be in future\\\");\\r\\n        }\\r\\n        pools[_id].startTime = _startTime;\\r\\n    }\\r\\n\\r\\n    function setEndTime(uint256 _id, uint256 _endTime) external onlyOwner onlyPreLaunch(_id) {\\r\\n        if (_endTime > 0) {\\r\\n            require(_endTime > block.timestamp, \\\"pool must end in the future, set start time\\\");\\r\\n            require(_endTime > pools[_id].startTime, \\\"pool must be after start time\\\");\\r\\n        }\\r\\n        require(pools[_id].startTime > 0, \\\"Start time must be set first\\\");\\r\\n\\r\\n        pools[_id].endTime = _endTime;\\r\\n    }\\r\\n\\r\\n    function setTitle(string memory _title) external onlyOwner {\\r\\n        idoTitle = _title;\\r\\n    }\\r\\n\\r\\n    function addWhiteList(uint256 id, address[] calldata _whiteList, uint256[] calldata _caps) external onlyOwner onlyPreLaunch(id) {\\r\\n        require(_whiteList.length == _caps.length, \\\"whitelist array length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _whiteList.length; ++i) {\\r\\n            whiteList[id][_whiteList[i]] = _caps[i];\\r\\n        }\\r\\n        emit WhiteList(id);\\r\\n    }\\r\\n\\r\\n    function poolsLength() external view returns (uint256) {\\r\\n        return pools.length;\\r\\n    }\\r\\n\\r\\n    function createPool(\\r\\n        string memory _poolURL,\\r\\n        string memory _poolTitle,\\r\\n        string memory _poolDescription,\\r\\n        IERC20 _token,\\r\\n        uint256 _tokenAmountToPreSale,\\r\\n        uint256 _softCap,\\r\\n        uint256 _hardCap,\\r\\n        uint256 _price,\\r\\n        uint256 _scaleFactor,\\r\\n        uint256 _maxContribution,\\r\\n        uint256 _minContribution,\\r\\n        uint256 _startTime,\\r\\n        uint256 _endTime,\\r\\n        bool _isWhiteList,\\r\\n        bool _enabled,\\r\\n        bool _finished\\r\\n\\r\\n    ) external onlyOwner returns (uint256) {\\r\\n        require(address(_token) != address(0), \\\"Pool token cannot be zero address\\\");\\r\\n\\r\\n        require(_tokenAmountToPreSale <= _token.balanceOf(_msgSender()) && _tokenAmountToPreSale > 0, \\\"Cap check\\\");\\r\\n\\r\\n        require(_price > uint256(0), \\\"Price must be greater than 0\\\");\\r\\n        require(_scaleFactor > uint256(0), \\\"Scale factor must be greater than 0\\\");\\r\\n\\r\\n        require(_startTime > block.timestamp, \\\"Start time must be in future\\\");\\r\\n        require(_endTime > block.timestamp && _endTime > _startTime, \\\"Start time must be in future and greater than start time\\\");\\r\\n\\r\\n        Pool memory newPool = Pool(\\r\\n            _poolURL,\\r\\n            _poolTitle,\\r\\n            _poolDescription,\\r\\n            _token,\\r\\n            _tokenAmountToPreSale,\\r\\n            _softCap,\\r\\n            _hardCap,\\r\\n            _price,\\r\\n            _scaleFactor,\\r\\n            _maxContribution,\\r\\n            _minContribution,\\r\\n            _startTime,\\r\\n            _endTime,\\r\\n            _isWhiteList,\\r\\n            _enabled,\\r\\n            _finished\\r\\n        );\\r\\n        pools.push(newPool);\\r\\n        _token.transferFrom(_msgSender(), address(this), _tokenAmountToPreSale);\\r\\n        emit NewPool(_msgSender(), address(this), pools.length);\\r\\n        return pools.length;\\r\\n    }\\r\\n\\r\\n    function swap(uint256 id, uint256 amount) external payable {\\r\\n        require(amount != 0, \\\"Amount should not be zero\\\");\\r\\n\\r\\n        if (_isPreSaleDisabled(id)) {\\r\\n            require(pools[id].enabled, \\\"Pool must be enabled\\\");\\r\\n        } else {\\r\\n            require(pools[id].startTime < block.timestamp && block.timestamp < pools[id].endTime, \\\"TIME: Pool not open\\\");\\r\\n        }\\r\\n\\r\\n        if (pools[id].isWhiteList) {\\r\\n            require(whiteList[id][_msgSender()] > 0, \\\"Should be white listed for the pool\\\");\\r\\n        }\\r\\n\\r\\n        require(amount == msg.value, \\\"Amount is not equal msg.value\\\");\\r\\n\\r\\n        Pool memory pool = pools[id];\\r\\n        uint256 left = pool.tokenAmountToPreSale - poolsSold[id];\\r\\n\\r\\n        //console.log(\\\"left1\\\", left);\\r\\n        uint256 curLocked = lockedTokens[id][_msgSender()];\\r\\n        if (left > pool.maxContribution - curLocked) {\\r\\n            left = pool.maxContribution - curLocked;\\r\\n        }\\r\\n        //console.log(\\\"left2\\\", left);\\r\\n        if (pools[id].isWhiteList && left >= whiteList[id][_msgSender()] - curLocked) {\\r\\n            left = whiteList[id][_msgSender()] - curLocked;\\r\\n        }\\r\\n        //console.log(\\\"left3\\\", left);\\r\\n        //console.log(\\\"curLocked\\\", curLocked, \\\"allo\\\", whiteList[id][_msgSender()]);\\r\\n\\r\\n        uint256 amt = (pool.price * amount) / pools[id].scaleFactor;\\r\\n\\r\\n        //console.log(\\\"amt\\\", amt);\\r\\n        require(left > 0, \\\"Not enough tokens for swap\\\");\\r\\n        uint256 back = 0;\\r\\n        if (left < amt) {\\r\\n            //console.log(\\\"left\\\", left);\\r\\n            //console.log(\\\"amt_\\\", amt);\\r\\n            amt = left;\\r\\n            uint256 newAmount = (amt * pools[id].scaleFactor) / pool.price;\\r\\n            back = amount - newAmount;\\r\\n            amount = newAmount;\\r\\n        }\\r\\n        lockedTokens[id][_msgSender()] = curLocked + amt;\\r\\n        poolsSold[id] = poolsSold[id] + amt;\\r\\n\\r\\n        (bool success,) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Should transfer ethers to the pool creator\\\");\\r\\n        if (back > 0) {\\r\\n            (success,) = _msgSender().call{value: back}(\\\"\\\");\\r\\n            require(success, \\\"Should transfer left ethers back to the user\\\");\\r\\n        }\\r\\n\\r\\n        emit Swap(id, 0, _msgSender(), amount, amt);\\r\\n    }\\r\\n\\r\\n    function startPool(uint256 id) external onlyOwner {\\r\\n        //require(_isManual(id), \\\"Pool is timed and not manual start\\\");\\r\\n        require(!pools[id].enabled, \\\"Pool is already enabled\\\");\\r\\n        require(!pools[id].finished, \\\"Pool is already completed\\\");\\r\\n        pools[id].enabled = true;\\r\\n        emit PoolStarted(id);\\r\\n    }\\r\\n\\r\\n    function stopPool(uint256 id) external onlyOwner {\\r\\n        //require(_isManual(id), \\\"Pool is timed and not manual stop\\\");\\r\\n        require(pools[id].enabled, \\\"Pool is not enabled\\\");\\r\\n        require(!pools[id].finished, \\\"Pool is already completed\\\");\\r\\n        pools[id].enabled = false;\\r\\n        pools[id].finished = true;\\r\\n        emit PoolFinished(id);\\r\\n    }\\r\\n\\r\\n    function finalizePool(uint256 id) external onlyOwner {\\r\\n        //require some time limit\\r\\n        //sweep remaining tokens\\r\\n    }\\r\\n\\r\\n    function claim(uint256 id) external {\\r\\n        if (_isPreSaleDisabled(id)) {\\r\\n            require(pools[id].finished, \\\"Cannot claim until pool is finished\\\");\\r\\n        } else {\\r\\n            require(block.timestamp > pools[id].endTime);\\r\\n        }\\r\\n\\r\\n        require(lockedTokens[id][_msgSender()] > 0, \\\"Should have tokens to claim\\\");\\r\\n        uint256 amount = lockedTokens[id][_msgSender()];\\r\\n        lockedTokens[id][_msgSender()] = 0;\\r\\n        pools[id].token.transfer(_msgSender(), amount);\\r\\n        emit Claim(id, _msgSender(), amount);\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x37e003dafdf379b72b962e4447eebbe5bd968ddd81f6a32488f5eee35e0c670b\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080604052346102bc576123e380380380610019816102c1565b9283398101906020818303126102bc578051906001600160401b0382116102bc570181601f820112156102bc578051906001600160401b03821161027b5761006a601f8301601f19166020016102c1565b92828452602083830101116102bc5760005b8281106102a7578360006020858301015233156102915760008054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a380516001600160401b03811161027b57600154600181811c91168015610271575b602082101461025b57601f81116101f6575b50602091601f821160011461019257918192600092610187575b50508160011b916000199060031b1c1916176001555b7fd6dfb19b926edb43e8baa6b90ca94e4ad9f9757d0f5d1749efb23c43e7d31213608060405133815230602082015242604082015260006060820152a16040516120fc90816102e78239f35b015190508280610125565b601f198216926001600052806000209160005b8581106101de575083600195106101c5575b505050811b0160015561013b565b015160001960f88460031b161c191690558280806101b7565b919260206001819286850151815501940192016101a5565b60016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6601f830160051c81019160208410610251575b601f0160051c01905b818110610245575061010b565b60008155600101610238565b909150819061022f565b634e487b7160e01b600052602260045260246000fd5b90607f16906100f9565b634e487b7160e01b600052604160045260246000fd5b631e4fbdf760e01b600052600060045260246000fd5b8060208092840101518282870101520161007c565b600080fd5b6040519190601f01601f191682016001600160401b0381118382101761027b5760405256fe6080604052600436101561001257600080fd5b60003560e01c80630f4d035714611b375780631d3a776214611aef5780632616027214611a1c5780632716ae66146119fe578063379607f5146118355780635fcad58b14610f7a578063715018a614610f2157806372910be014610d9a5780638da5cb5b14610d715780639905bda914610d45578063a901d15c14610cc3578063abfbac4b14610b48578063ac4afa3814610a15578063b37bc8b4146109cd578063ba278e0814610951578063baed273a146107b6578063c5a1f4341461079b578063d96073cf1461017f5763f2fde38b146100ed57600080fd5b3461017a57602036600319011261017a576004356001600160a01b0381169081900361017a5761011b612050565b801561016457600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b600052600060045260246000fd5b600080fd5b61018836611dea565b908182156107565761019982612079565b156106eb5760ff600d6101ab84611e00565b50015460081c16156106af575b60ff600d6101c584611e00565b50015416610640575b3483036105fb576101de82611e00565b50604051906101ec82611c66565b6101f581611ca3565b825261020360018201611ca3565b602083015261021460028201611ca3565b604083015260018060a01b0360038201541660608301526102d46004820154806080850152600583015460a0850152600683015460c085015260078301549360e0810194855260088401546101008201526101e060ff600d6009870154966101208501978852600a810154610140860152600b810154610160860152600c810154610180860152015481811615156101a0850152818160081c1615156101c085015260101c16151591015285600052600360205260406000205490611fbd565b94846000526004602052604060002060018060a01b03331660005260205260406000205491610304838251611fbd565b87116105e6575b5060ff600d61031987611e00565b50015416806105b1575b61057d575b61034a610336828551611fe0565b600861034188611e00565b50015490611ff3565b958015610538576000938782106104f2575b5050508461036991612013565b836000526004602052604060002060018060a01b0333166000526020526040600020558260005260036020526103a484604060002054612013565b83600052600360205260406000205560008080808560018060a01b038254165af16103cd612020565b501561049a578061041f575b7f178ad077c936808a2e8e4e7aeae8cba13fe989d668042b2d6ac465bb106da84160a08486856040519283526000602084015233604084015260608301526080820152a1005b600080808093959495335af1610433612020565b50156104405790836103d9565b60405162461bcd60e51b815260206004820152602c60248201527f53686f756c64207472616e73666572206c65667420657468657273206261636b60448201526b103a37903a3432903ab9b2b960a11b6064820152608490fd5b60405162461bcd60e51b815260206004820152602a60248201527f53686f756c64207472616e736665722065746865727320746f2074686520706f60448201526937b61031b932b0ba37b960b11b6064820152608490fd5b6105209750610369939550819294506105289061052f9298899460086105178b611e00565b50015490611fe0565b905190611ff3565b8094611fbd565b9293918761035c565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e7320666f7220737761700000000000006044820152606490fd5b9450836000526005602052604060002060018060a01b0333166000526020526105ab81604060002054611fbd565b94610328565b50846000526005602052604060002060018060a01b0333166000526020526105de82604060002054611fbd565b861015610323565b6105f4919650829051611fbd565b948661030b565b60405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206973206e6f7420657175616c206d73672e76616c75650000006044820152606490fd5b60008281526005602090815260408083203384529091529020546101ce5760405162461bcd60e51b815260206004820152602360248201527f53686f756c64206265207768697465206c697374656420666f722074686520706044820152621bdbdb60ea1b6064820152608490fd5b60405162461bcd60e51b8152602060048201526014602482015273141bdbdb081b5d5cdd08189948195b98589b195960621b6044820152606490fd5b600b6106f683611e00565b500154421180610740575b6101b85760405162461bcd60e51b81526020600482015260136024820152722a24a6a29d102837b7b6103737ba1037b832b760691b6044820152606490fd5b50600c61074c83611e00565b5001544210610701565b60405162461bcd60e51b815260206004820152601960248201527f416d6f756e742073686f756c64206e6f74206265207a65726f000000000000006044820152606490fd5b3461017a57602036600319011261017a576107b4612050565b005b3461017a57606036600319011261017a576004356024356001600160401b03811161017a576107e9903690600401611e35565b6044356001600160401b03811161017a57610808903690600401611e35565b610813929192612050565b61081c85612079565b156109345761083e60ff600d61083188611e00565b50015460081c1615611f15565b61085b60ff600d61084e88611e00565b50015460101c1615611e65565b8082036108ef5760005b828110610899577f1c795fb57fbd7ee97b1adf0167126e0a37c1f0dd232b1cc17173e096c1f66937602087604051908152a1005b6108a4818386611fad565b35908660005260056020526040600020916108c0828689611fad565b35926001600160a01b038416840361017a57600193604091600091868060a01b03168252602052205501610865565b60405162461bcd60e51b815260206004820152601f60248201527f77686974656c697374206172726179206c656e677468206d69736d61746368006044820152606490fd5b61094c600b61094287611e00565b5001544210611f61565b61085b565b3461017a576109a6600b61096436611dea565b929061096e612050565b61097781612079565b156109bb5761098c60ff600d61083184611e00565b61099c60ff600d61084e84611e00565b836109ab57611e00565b500155005b6109b6428511611ec9565b611e00565b6109c88361094283611e00565b61099c565b3461017a57604036600319011261017a576109e6611c16565b600435600052600560205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461017a57602036600319011261017a5760043560025481101561017a57610a3c90611e00565b50610a4681611ca3565b610a5260018301611ca3565b91610a5f60028201611ca3565b600160a01b60019003600383015416916004810154600582015460068301546007840154600885015490600986015492600a87015494600b88015496600c89015498600d0154996040519d8e809e61020082526102008201610ac091611d47565b908082039060200152610ad291611d47565b8d810360408f0152610ae391611d47565b9a60608d015260808c015260a08b015260c08a015260e089015261010088015261012087015261014086015261016085015261018084015260ff811615156101a08401528060081c60ff1615156101c084015260101c60ff1615156101e08301520390f35b3461017a57610b5636611dea565b90610b5f612050565b610b6881612079565b15610cb057610b7d60ff600d61083184611e00565b610b8d60ff600d61084e84611e00565b81610bf6575b600b610b9e82611e00565b50015415610bb1576109a6600c91611e00565b60405162461bcd60e51b815260206004820152601c60248201527f53746172742074696d65206d75737420626520736574206669727374000000006044820152606490fd5b42821115610c5757600b610c0982611e00565b5001548211610b935760405162461bcd60e51b815260206004820152601d60248201527f706f6f6c206d7573742062652061667465722073746172742074696d650000006044820152606490fd5b60405162461bcd60e51b815260206004820152602b60248201527f706f6f6c206d75737420656e6420696e20746865206675747572652c2073657460448201526a2073746172742074696d6560a81b6064820152608490fd5b610cbe600b61094283611e00565b610b8d565b3461017a57602036600319011261017a577f510ad7fdc6893c3992445eb80eeade3af54768c0d8dc2cc8fc57b1c9afa1491d6020600435610d02612050565b610d1260ff600d61083184611e00565b610d2260ff600d61084e84611e00565b600d610d2d82611e00565b5001805461ff001916610100179055604051908152a1005b3461017a57602036600319011261017a5760043560005260036020526020604060002054604051908152f35b3461017a57600036600319011261017a576000546040516001600160a01b039091168152602090f35b3461017a57602036600319011261017a576004356001600160401b03811161017a57610dca903690600401611da3565b610dd2612050565b80516001600160401b038111610f0b57610ded600154611c2c565b601f8111610e9e575b50602091601f8211600114610e3257918192600092610e27575b5050600019600383901b1c1916600191821b179055005b015190508280610e10565b601f1982169260016000526000805160206120a78339815191529160005b858110610e8657508360019510610e6d575b505050811b01600155005b015160001960f88460031b161c19169055828080610e62565b91926020600181928685015181550194019201610e50565b6001600052601f820160051c6000805160206120a7833981519152019060208310610ef5575b601f0160051c6000805160206120a783398151915201905b818110610ee95750610df6565b60008155600101610edc565b6000805160206120a78339815191529150610ec4565b634e487b7160e01b600052604160045260246000fd5b3461017a57600036600319011261017a57610f3a612050565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461017a5761020036600319011261017a576004356001600160401b03811161017a57610fab903690600401611da3565b6024356001600160401b03811161017a57610fca903690600401611da3565b6044356001600160401b03811161017a57610fe9903690600401611da3565b60643591906001600160a01b038316830361017a576101a43561018435610164356101043560e435841515850361017a576101c43595861515870361017a576101e43597881515890361017a5761103e612050565b6001600160a01b038a16156117e6576040516370a0823160e01b81523360048201526020816024816001600160a01b038f165afa90811561140a576000916117b4575b506084351115806117a9575b156117785782156117335783156116e2576110a9428611611ec9565b428611806116d9575b1561166e576040519a6110c48c611c66565b8b5260208b015260408a01526001600160a01b03881660608a015260843560808a015260a43560a08a015260c43560c08a015260e0890152610100880152610124356101208801526101443561014088015261016087015261018086015215156101a085015215156101c084015215156101e083015260025468010000000000000000811015610f0b5780600161115e9201600255611e00565b9290926116585780519283516001600160401b038111610f0b576111828254611c2c565b601f8111611614575b50602094601f82116001146115af579481929394956000926115a4575b50508160011b916000199060031b1c19161781555b6001810160208301518051906001600160401b038211610f0b5781906111e38454611c2c565b601f8111611551575b50602090601f83116001146114ec576000926114e1575b50508160011b916000199060031b1c19161790555b60408201518051906001600160401b038211610f0b5761123b6002840154611c2c565b601f8111611496575b50602090601f83116001146114215791806101e09492600d94600092611416575b50508160011b916000199060031b1c19161760028201555b60608401516003820180546001600160a01b0319166001600160a01b03928316179055608085015160048084019190915560a0860151600584015560c0860151600684015560e086015160078401556101008601516008808501919091556101208701516009850155610140870151600a850155610160870151600b850155610180870151600c8501556101a08701519490930180546101c0880151969097015162ffffff1990971660ff951515959095169490941794151590921b61ff00169390931793151560101b62ff0000169390931790556040516323b872dd60e01b815233928101929092523060248301526084356044830152909160209183916064918391600091165af1801561140a576113dd575b60025460408051338152306020808301919091529181018390529091907f3e576c516aed7bfaa059edc1ec8f0628a6b75a37c777be146867372226f0bfdd90606090a1604051908152f35b6113fe9060203d602011611403575b6113f68183611c82565b810190611eb1565b611392565b503d6113ec565b6040513d6000823e3d90fd5b015190508780611265565b9060028401600052806000209160005b601f198516811061147e5750926101e09492600192600d9583601f19811610611465575b505050811b01600282015561127d565b015160001960f88460031b161c19169055878080611455565b91926020600181928685015181550194019201611431565b600284016000526020600020601f840160051c810191602085106114d7575b601f0160051c01905b8181106114cb5750611244565b600081556001016114be565b90915081906114b5565b015190508680611203565b60008581528281209350601f198516905b8181106115395750908460019594939210611520575b505050811b019055611218565b015160001960f88460031b161c19169055868080611513565b929360206001819287860151815501950193016114fd565b909150836000526020600020601f840160051c8101916020851061159a575b90601f859493920160051c01905b81811061158b57506111ec565b6000815584935060010161157e565b9091508190611570565b0151905085806111a8565b601f1982169583600052806000209160005b8881106115fc575083600195969798106115e3575b505050811b0181556111bd565b015160001960f88460031b161c191690558580806115d6565b919260206001819286850151815501940192016115c1565b826000526020600020601f830160051c810160208410611651575b601f830160051c8201811061164557505061118b565b6000815560010161162f565b508061162f565b634e487b7160e01b600052600060045260246000fd5b60405162461bcd60e51b815260206004820152603860248201527f53746172742074696d65206d75737420626520696e2066757475726520616e6460448201527f2067726561746572207468616e2073746172742074696d6500000000000000006064820152608490fd5b508486116110b2565b60405162461bcd60e51b815260206004820152602360248201527f5363616c6520666163746f72206d75737420626520677265617465722074686160448201526206e20360ec1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e2030000000006044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526843617020636865636b60b81b6044820152606490fd5b50608435151561108d565b90506020813d6020116117de575b816117cf60209383611c82565b8101031261017a57518c611081565b3d91506117c2565b60405162461bcd60e51b815260206004820152602160248201527f506f6f6c20746f6b656e2063616e6e6f74206265207a65726f206164647265736044820152607360f81b6064820152608490fd5b3461017a57602036600319011261017a5760043561185281612079565b156119e55760ff600d61186483611e00565b50015460101c1615611994575b60008181526004602090815260408083203384529091529020541561194f576000818152600460209081526040808320338452825282208054908390559192906118ba82611e00565b506003015460405163a9059cbb60e01b81523360048201526024810185905294859160449183916001600160a01b03165af191821561140a577f3ed1528b0fdc7c5207c1bf935e34a667e13656b9ed165260c522be0bc544f30393606093611932575b506040519182523360208301526040820152a1005b61194a9060203d602011611403576113f68183611c82565b61191d565b60405162461bcd60e51b815260206004820152601b60248201527f53686f756c64206861766520746f6b656e7320746f20636c61696d00000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f43616e6e6f7420636c61696d20756e74696c20706f6f6c2069732066696e69736044820152621a195960ea1b6064820152608490fd5b600c6119f082611e00565b500154421161187157600080fd5b3461017a57600036600319011261017a576020600254604051908152f35b3461017a57600036600319011261017a576040516000600154611a3e81611c2c565b8084529060018116908115611acb5750600114611a7e575b611a7a83611a6681850382611c82565b604051918291602083526020830190611d47565b0390f35b600160009081526000805160206120a7833981519152939250905b808210611ab157509091508101602001611a66611a56565b919260018160209254838588010152019101909291611a99565b60ff191660208086019190915291151560051b84019091019150611a669050611a56565b3461017a57604036600319011261017a57611b08611c16565b600435600052600460205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461017a57602036600319011261017a57600435611b53612050565b60ff600d611b6083611e00565b50015460081c1615611bdb57602081611ba060ff600d61084e7fbbd128d572b35cebb264fb61023df13364a27c79ee7724c03f071f1a57d9a68596611e00565b600d611bab82611e00565b5001805461ff0019169055600d611bc182611e00565b5001805462ff0000191662010000179055604051908152a1005b60405162461bcd60e51b8152602060048201526013602482015272141bdbdb081a5cc81b9bdd08195b98589b1959606a1b6044820152606490fd5b602435906001600160a01b038216820361017a57565b90600182811c92168015611c5c575b6020831014611c4657565b634e487b7160e01b600052602260045260246000fd5b91607f1691611c3b565b61020081019081106001600160401b03821117610f0b57604052565b90601f801991011681019081106001600160401b03821117610f0b57604052565b9060405191826000825492611cb784611c2c565b8084529360018116908115611d255750600114611cde575b50611cdc92500383611c82565b565b90506000929192526020600020906000915b818310611d09575050906020611cdc9282010138611ccf565b6020919350806001915483858901015201910190918492611cf0565b905060209250611cdc94915060ff191682840152151560051b82010138611ccf565b919082519283825260005b848110611d73575050826000602080949584010152601f8019910116010190565b80602080928401015182828601015201611d52565b6001600160401b038111610f0b57601f01601f191660200190565b81601f8201121561017a57803590611dba82611d88565b92611dc86040519485611c82565b8284526020838301011161017a57816000926020809301838601378301015290565b604090600319011261017a576004359060243590565b600254811015611e1f576002600052600e602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b9181601f8401121561017a578235916001600160401b03831161017a576020808501948460051b01011161017a57565b15611e6c57565b60405162461bcd60e51b815260206004820152601960248201527f506f6f6c20697320616c726561647920636f6d706c65746564000000000000006044820152606490fd5b9081602091031261017a5751801515810361017a5790565b15611ed057565b60405162461bcd60e51b815260206004820152601c60248201527f53746172742074696d65206d75737420626520696e20667574757265000000006044820152606490fd5b15611f1c57565b60405162461bcd60e51b815260206004820152601760248201527f506f6f6c20697320616c726561647920656e61626c65640000000000000000006044820152606490fd5b15611f6857565b60405162461bcd60e51b815260206004820152601a60248201527f506f6f6c2073746172742074696d6520686173207061737365640000000000006044820152606490fd5b9190811015611e1f5760051b0190565b91908203918211611fca57565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715611fca57565b8115611ffd570490565b634e487b7160e01b600052601260045260246000fd5b91908201809211611fca57565b3d1561204b573d9061203182611d88565b9161203f6040519384611c82565b82523d6000602084013e565b606090565b6000546001600160a01b0316330361206457565b63118cdaa760e01b6000523360045260246000fd5b600b61208482611e00565b500154159081612092575090565b600c915061209f90611e00565b500154159056feb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a264697066735822122072f38bb7fb7a04ab37fd2921989c9853dabdf8a80a1eab578d7f131e5a23b90164736f6c634300081a0033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80630f4d035714611b375780631d3a776214611aef5780632616027214611a1c5780632716ae66146119fe578063379607f5146118355780635fcad58b14610f7a578063715018a614610f2157806372910be014610d9a5780638da5cb5b14610d715780639905bda914610d45578063a901d15c14610cc3578063abfbac4b14610b48578063ac4afa3814610a15578063b37bc8b4146109cd578063ba278e0814610951578063baed273a146107b6578063c5a1f4341461079b578063d96073cf1461017f5763f2fde38b146100ed57600080fd5b3461017a57602036600319011261017a576004356001600160a01b0381169081900361017a5761011b612050565b801561016457600080546001600160a01b03198116831782556001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3005b631e4fbdf760e01b600052600060045260246000fd5b600080fd5b61018836611dea565b908182156107565761019982612079565b156106eb5760ff600d6101ab84611e00565b50015460081c16156106af575b60ff600d6101c584611e00565b50015416610640575b3483036105fb576101de82611e00565b50604051906101ec82611c66565b6101f581611ca3565b825261020360018201611ca3565b602083015261021460028201611ca3565b604083015260018060a01b0360038201541660608301526102d46004820154806080850152600583015460a0850152600683015460c085015260078301549360e0810194855260088401546101008201526101e060ff600d6009870154966101208501978852600a810154610140860152600b810154610160860152600c810154610180860152015481811615156101a0850152818160081c1615156101c085015260101c16151591015285600052600360205260406000205490611fbd565b94846000526004602052604060002060018060a01b03331660005260205260406000205491610304838251611fbd565b87116105e6575b5060ff600d61031987611e00565b50015416806105b1575b61057d575b61034a610336828551611fe0565b600861034188611e00565b50015490611ff3565b958015610538576000938782106104f2575b5050508461036991612013565b836000526004602052604060002060018060a01b0333166000526020526040600020558260005260036020526103a484604060002054612013565b83600052600360205260406000205560008080808560018060a01b038254165af16103cd612020565b501561049a578061041f575b7f178ad077c936808a2e8e4e7aeae8cba13fe989d668042b2d6ac465bb106da84160a08486856040519283526000602084015233604084015260608301526080820152a1005b600080808093959495335af1610433612020565b50156104405790836103d9565b60405162461bcd60e51b815260206004820152602c60248201527f53686f756c64207472616e73666572206c65667420657468657273206261636b60448201526b103a37903a3432903ab9b2b960a11b6064820152608490fd5b60405162461bcd60e51b815260206004820152602a60248201527f53686f756c64207472616e736665722065746865727320746f2074686520706f60448201526937b61031b932b0ba37b960b11b6064820152608490fd5b6105209750610369939550819294506105289061052f9298899460086105178b611e00565b50015490611fe0565b905190611ff3565b8094611fbd565b9293918761035c565b60405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820746f6b656e7320666f7220737761700000000000006044820152606490fd5b9450836000526005602052604060002060018060a01b0333166000526020526105ab81604060002054611fbd565b94610328565b50846000526005602052604060002060018060a01b0333166000526020526105de82604060002054611fbd565b861015610323565b6105f4919650829051611fbd565b948661030b565b60405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206973206e6f7420657175616c206d73672e76616c75650000006044820152606490fd5b60008281526005602090815260408083203384529091529020546101ce5760405162461bcd60e51b815260206004820152602360248201527f53686f756c64206265207768697465206c697374656420666f722074686520706044820152621bdbdb60ea1b6064820152608490fd5b60405162461bcd60e51b8152602060048201526014602482015273141bdbdb081b5d5cdd08189948195b98589b195960621b6044820152606490fd5b600b6106f683611e00565b500154421180610740575b6101b85760405162461bcd60e51b81526020600482015260136024820152722a24a6a29d102837b7b6103737ba1037b832b760691b6044820152606490fd5b50600c61074c83611e00565b5001544210610701565b60405162461bcd60e51b815260206004820152601960248201527f416d6f756e742073686f756c64206e6f74206265207a65726f000000000000006044820152606490fd5b3461017a57602036600319011261017a576107b4612050565b005b3461017a57606036600319011261017a576004356024356001600160401b03811161017a576107e9903690600401611e35565b6044356001600160401b03811161017a57610808903690600401611e35565b610813929192612050565b61081c85612079565b156109345761083e60ff600d61083188611e00565b50015460081c1615611f15565b61085b60ff600d61084e88611e00565b50015460101c1615611e65565b8082036108ef5760005b828110610899577f1c795fb57fbd7ee97b1adf0167126e0a37c1f0dd232b1cc17173e096c1f66937602087604051908152a1005b6108a4818386611fad565b35908660005260056020526040600020916108c0828689611fad565b35926001600160a01b038416840361017a57600193604091600091868060a01b03168252602052205501610865565b60405162461bcd60e51b815260206004820152601f60248201527f77686974656c697374206172726179206c656e677468206d69736d61746368006044820152606490fd5b61094c600b61094287611e00565b5001544210611f61565b61085b565b3461017a576109a6600b61096436611dea565b929061096e612050565b61097781612079565b156109bb5761098c60ff600d61083184611e00565b61099c60ff600d61084e84611e00565b836109ab57611e00565b500155005b6109b6428511611ec9565b611e00565b6109c88361094283611e00565b61099c565b3461017a57604036600319011261017a576109e6611c16565b600435600052600560205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461017a57602036600319011261017a5760043560025481101561017a57610a3c90611e00565b50610a4681611ca3565b610a5260018301611ca3565b91610a5f60028201611ca3565b600160a01b60019003600383015416916004810154600582015460068301546007840154600885015490600986015492600a87015494600b88015496600c89015498600d0154996040519d8e809e61020082526102008201610ac091611d47565b908082039060200152610ad291611d47565b8d810360408f0152610ae391611d47565b9a60608d015260808c015260a08b015260c08a015260e089015261010088015261012087015261014086015261016085015261018084015260ff811615156101a08401528060081c60ff1615156101c084015260101c60ff1615156101e08301520390f35b3461017a57610b5636611dea565b90610b5f612050565b610b6881612079565b15610cb057610b7d60ff600d61083184611e00565b610b8d60ff600d61084e84611e00565b81610bf6575b600b610b9e82611e00565b50015415610bb1576109a6600c91611e00565b60405162461bcd60e51b815260206004820152601c60248201527f53746172742074696d65206d75737420626520736574206669727374000000006044820152606490fd5b42821115610c5757600b610c0982611e00565b5001548211610b935760405162461bcd60e51b815260206004820152601d60248201527f706f6f6c206d7573742062652061667465722073746172742074696d650000006044820152606490fd5b60405162461bcd60e51b815260206004820152602b60248201527f706f6f6c206d75737420656e6420696e20746865206675747572652c2073657460448201526a2073746172742074696d6560a81b6064820152608490fd5b610cbe600b61094283611e00565b610b8d565b3461017a57602036600319011261017a577f510ad7fdc6893c3992445eb80eeade3af54768c0d8dc2cc8fc57b1c9afa1491d6020600435610d02612050565b610d1260ff600d61083184611e00565b610d2260ff600d61084e84611e00565b600d610d2d82611e00565b5001805461ff001916610100179055604051908152a1005b3461017a57602036600319011261017a5760043560005260036020526020604060002054604051908152f35b3461017a57600036600319011261017a576000546040516001600160a01b039091168152602090f35b3461017a57602036600319011261017a576004356001600160401b03811161017a57610dca903690600401611da3565b610dd2612050565b80516001600160401b038111610f0b57610ded600154611c2c565b601f8111610e9e575b50602091601f8211600114610e3257918192600092610e27575b5050600019600383901b1c1916600191821b179055005b015190508280610e10565b601f1982169260016000526000805160206120a78339815191529160005b858110610e8657508360019510610e6d575b505050811b01600155005b015160001960f88460031b161c19169055828080610e62565b91926020600181928685015181550194019201610e50565b6001600052601f820160051c6000805160206120a7833981519152019060208310610ef5575b601f0160051c6000805160206120a783398151915201905b818110610ee95750610df6565b60008155600101610edc565b6000805160206120a78339815191529150610ec4565b634e487b7160e01b600052604160045260246000fd5b3461017a57600036600319011261017a57610f3a612050565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b3461017a5761020036600319011261017a576004356001600160401b03811161017a57610fab903690600401611da3565b6024356001600160401b03811161017a57610fca903690600401611da3565b6044356001600160401b03811161017a57610fe9903690600401611da3565b60643591906001600160a01b038316830361017a576101a43561018435610164356101043560e435841515850361017a576101c43595861515870361017a576101e43597881515890361017a5761103e612050565b6001600160a01b038a16156117e6576040516370a0823160e01b81523360048201526020816024816001600160a01b038f165afa90811561140a576000916117b4575b506084351115806117a9575b156117785782156117335783156116e2576110a9428611611ec9565b428611806116d9575b1561166e576040519a6110c48c611c66565b8b5260208b015260408a01526001600160a01b03881660608a015260843560808a015260a43560a08a015260c43560c08a015260e0890152610100880152610124356101208801526101443561014088015261016087015261018086015215156101a085015215156101c084015215156101e083015260025468010000000000000000811015610f0b5780600161115e9201600255611e00565b9290926116585780519283516001600160401b038111610f0b576111828254611c2c565b601f8111611614575b50602094601f82116001146115af579481929394956000926115a4575b50508160011b916000199060031b1c19161781555b6001810160208301518051906001600160401b038211610f0b5781906111e38454611c2c565b601f8111611551575b50602090601f83116001146114ec576000926114e1575b50508160011b916000199060031b1c19161790555b60408201518051906001600160401b038211610f0b5761123b6002840154611c2c565b601f8111611496575b50602090601f83116001146114215791806101e09492600d94600092611416575b50508160011b916000199060031b1c19161760028201555b60608401516003820180546001600160a01b0319166001600160a01b03928316179055608085015160048084019190915560a0860151600584015560c0860151600684015560e086015160078401556101008601516008808501919091556101208701516009850155610140870151600a850155610160870151600b850155610180870151600c8501556101a08701519490930180546101c0880151969097015162ffffff1990971660ff951515959095169490941794151590921b61ff00169390931793151560101b62ff0000169390931790556040516323b872dd60e01b815233928101929092523060248301526084356044830152909160209183916064918391600091165af1801561140a576113dd575b60025460408051338152306020808301919091529181018390529091907f3e576c516aed7bfaa059edc1ec8f0628a6b75a37c777be146867372226f0bfdd90606090a1604051908152f35b6113fe9060203d602011611403575b6113f68183611c82565b810190611eb1565b611392565b503d6113ec565b6040513d6000823e3d90fd5b015190508780611265565b9060028401600052806000209160005b601f198516811061147e5750926101e09492600192600d9583601f19811610611465575b505050811b01600282015561127d565b015160001960f88460031b161c19169055878080611455565b91926020600181928685015181550194019201611431565b600284016000526020600020601f840160051c810191602085106114d7575b601f0160051c01905b8181106114cb5750611244565b600081556001016114be565b90915081906114b5565b015190508680611203565b60008581528281209350601f198516905b8181106115395750908460019594939210611520575b505050811b019055611218565b015160001960f88460031b161c19169055868080611513565b929360206001819287860151815501950193016114fd565b909150836000526020600020601f840160051c8101916020851061159a575b90601f859493920160051c01905b81811061158b57506111ec565b6000815584935060010161157e565b9091508190611570565b0151905085806111a8565b601f1982169583600052806000209160005b8881106115fc575083600195969798106115e3575b505050811b0181556111bd565b015160001960f88460031b161c191690558580806115d6565b919260206001819286850151815501940192016115c1565b826000526020600020601f830160051c810160208410611651575b601f830160051c8201811061164557505061118b565b6000815560010161162f565b508061162f565b634e487b7160e01b600052600060045260246000fd5b60405162461bcd60e51b815260206004820152603860248201527f53746172742074696d65206d75737420626520696e2066757475726520616e6460448201527f2067726561746572207468616e2073746172742074696d6500000000000000006064820152608490fd5b508486116110b2565b60405162461bcd60e51b815260206004820152602360248201527f5363616c6520666163746f72206d75737420626520677265617465722074686160448201526206e20360ec1b6064820152608490fd5b60405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e2030000000006044820152606490fd5b60405162461bcd60e51b815260206004820152600960248201526843617020636865636b60b81b6044820152606490fd5b50608435151561108d565b90506020813d6020116117de575b816117cf60209383611c82565b8101031261017a57518c611081565b3d91506117c2565b60405162461bcd60e51b815260206004820152602160248201527f506f6f6c20746f6b656e2063616e6e6f74206265207a65726f206164647265736044820152607360f81b6064820152608490fd5b3461017a57602036600319011261017a5760043561185281612079565b156119e55760ff600d61186483611e00565b50015460101c1615611994575b60008181526004602090815260408083203384529091529020541561194f576000818152600460209081526040808320338452825282208054908390559192906118ba82611e00565b506003015460405163a9059cbb60e01b81523360048201526024810185905294859160449183916001600160a01b03165af191821561140a577f3ed1528b0fdc7c5207c1bf935e34a667e13656b9ed165260c522be0bc544f30393606093611932575b506040519182523360208301526040820152a1005b61194a9060203d602011611403576113f68183611c82565b61191d565b60405162461bcd60e51b815260206004820152601b60248201527f53686f756c64206861766520746f6b656e7320746f20636c61696d00000000006044820152606490fd5b60405162461bcd60e51b815260206004820152602360248201527f43616e6e6f7420636c61696d20756e74696c20706f6f6c2069732066696e69736044820152621a195960ea1b6064820152608490fd5b600c6119f082611e00565b500154421161187157600080fd5b3461017a57600036600319011261017a576020600254604051908152f35b3461017a57600036600319011261017a576040516000600154611a3e81611c2c565b8084529060018116908115611acb5750600114611a7e575b611a7a83611a6681850382611c82565b604051918291602083526020830190611d47565b0390f35b600160009081526000805160206120a7833981519152939250905b808210611ab157509091508101602001611a66611a56565b919260018160209254838588010152019101909291611a99565b60ff191660208086019190915291151560051b84019091019150611a669050611a56565b3461017a57604036600319011261017a57611b08611c16565b600435600052600460205260406000209060018060a01b03166000526020526020604060002054604051908152f35b3461017a57602036600319011261017a57600435611b53612050565b60ff600d611b6083611e00565b50015460081c1615611bdb57602081611ba060ff600d61084e7fbbd128d572b35cebb264fb61023df13364a27c79ee7724c03f071f1a57d9a68596611e00565b600d611bab82611e00565b5001805461ff0019169055600d611bc182611e00565b5001805462ff0000191662010000179055604051908152a1005b60405162461bcd60e51b8152602060048201526013602482015272141bdbdb081a5cc81b9bdd08195b98589b1959606a1b6044820152606490fd5b602435906001600160a01b038216820361017a57565b90600182811c92168015611c5c575b6020831014611c4657565b634e487b7160e01b600052602260045260246000fd5b91607f1691611c3b565b61020081019081106001600160401b03821117610f0b57604052565b90601f801991011681019081106001600160401b03821117610f0b57604052565b9060405191826000825492611cb784611c2c565b8084529360018116908115611d255750600114611cde575b50611cdc92500383611c82565b565b90506000929192526020600020906000915b818310611d09575050906020611cdc9282010138611ccf565b6020919350806001915483858901015201910190918492611cf0565b905060209250611cdc94915060ff191682840152151560051b82010138611ccf565b919082519283825260005b848110611d73575050826000602080949584010152601f8019910116010190565b80602080928401015182828601015201611d52565b6001600160401b038111610f0b57601f01601f191660200190565b81601f8201121561017a57803590611dba82611d88565b92611dc86040519485611c82565b8284526020838301011161017a57816000926020809301838601378301015290565b604090600319011261017a576004359060243590565b600254811015611e1f576002600052600e602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b9181601f8401121561017a578235916001600160401b03831161017a576020808501948460051b01011161017a57565b15611e6c57565b60405162461bcd60e51b815260206004820152601960248201527f506f6f6c20697320616c726561647920636f6d706c65746564000000000000006044820152606490fd5b9081602091031261017a5751801515810361017a5790565b15611ed057565b60405162461bcd60e51b815260206004820152601c60248201527f53746172742074696d65206d75737420626520696e20667574757265000000006044820152606490fd5b15611f1c57565b60405162461bcd60e51b815260206004820152601760248201527f506f6f6c20697320616c726561647920656e61626c65640000000000000000006044820152606490fd5b15611f6857565b60405162461bcd60e51b815260206004820152601a60248201527f506f6f6c2073746172742074696d6520686173207061737365640000000000006044820152606490fd5b9190811015611e1f5760051b0190565b91908203918211611fca57565b634e487b7160e01b600052601160045260246000fd5b81810292918115918404141715611fca57565b8115611ffd570490565b634e487b7160e01b600052601260045260246000fd5b91908201809211611fca57565b3d1561204b573d9061203182611d88565b9161203f6040519384611c82565b82523d6000602084013e565b606090565b6000546001600160a01b0316330361206457565b63118cdaa760e01b6000523360045260246000fd5b600b61208482611e00565b500154159081612092575090565b600c915061209f90611e00565b500154159056feb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a264697066735822122072f38bb7fb7a04ab37fd2921989c9853dabdf8a80a1eab578d7f131e5a23b90164736f6c634300081a0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1171,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "idoTitle",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1175,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "pools",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Pool)1163_storage)dyn_storage"
      },
      {
        "astId": 1179,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "poolsSold",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1185,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "lockedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1191,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "whiteList",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Pool)1163_storage)dyn_storage": {
        "base": "t_struct(Pool)1163_storage",
        "encoding": "dynamic_array",
        "label": "struct Launchpad.Pool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)315": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Pool)1163_storage": {
        "encoding": "inplace",
        "label": "struct Launchpad.Pool",
        "members": [
          {
            "astId": 1131,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "poolURL",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1133,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "poolTitle",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1135,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "poolDescription",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1138,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "token",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)315"
          },
          {
            "astId": 1140,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "tokenAmountToPreSale",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1142,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "softCap",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1144,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "hardCap",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1146,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "price",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1148,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "scaleFactor",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1150,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "maxContribution",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 1152,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "minContribution",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 1154,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "startTime",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 1156,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "endTime",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 1158,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "isWhiteList",
            "offset": 0,
            "slot": "13",
            "type": "t_bool"
          },
          {
            "astId": 1160,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "enabled",
            "offset": 1,
            "slot": "13",
            "type": "t_bool"
          },
          {
            "astId": 1162,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "finished",
            "offset": 2,
            "slot": "13",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}