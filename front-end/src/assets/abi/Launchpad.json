{
  "address": "0x499fD8Cc01D3f725156ff4fBBd41ED5272ea775F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockCreated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "name": "NewLaunchpad",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "listing",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "NewPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolFinished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "PoolStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "roundID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "WhiteList",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_whiteList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_caps",
          "type": "uint256[]"
        }
      ],
      "name": "addWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "poolTitle",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxContribution",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isWhiteList",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "onlyHolderToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minHolderBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timespan",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "finalizePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "idoTitle",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "string",
          "name": "poolTitle",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxContribution",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isWhiteList",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "onlyHolderToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minHolderBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timespan",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "finished",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolsSold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_holderToken",
          "type": "address"
        }
      ],
      "name": "setHolderToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minHolderBalance",
          "type": "uint256"
        }
      ],
      "name": "setMinHolderAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        }
      ],
      "name": "setStartTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timespan",
          "type": "uint256"
        }
      ],
      "name": "setTimespan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        }
      ],
      "name": "setTitle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "startPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "stopPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2c4b4e53d6ff49b9788a3560f62360528aa4190cd0bedfe5a7a18b59e2ad0fd",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xB822F3a12459De177b30BfCA6e15C0ceEb50ba83",
    "contractAddress": null,
    "transactionIndex": 0,
    "gasUsed": "3859183",
    "logsBloom": "0x
    "blockHash": "0x95d3142554646767328b3a4ed7f4de302236054309ed712317d2a6e135f63aa1",
    "transactionHash": "0xc2c4b4e53d6ff49b9788a3560f62360528aa4190cd0bedfe5a7a18b59e2ad0fd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 45996568,
        "transactionHash": "0xc2c4b4e53d6ff49b9788a3560f62360528aa4190cd0bedfe5a7a18b59e2ad0fd",
        "address": "0x499fD8Cc01D3f725156ff4fBBd41ED5272ea775F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x95d3142554646767328b3a4ed7f4de302236054309ed712317d2a6e135f63aa1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 45996568,
        "transactionHash": "0xc2c4b4e53d6ff49b9788a3560f62360528aa4190cd0bedfe5a7a18b59e2ad0fd",
        "address": "0x499fD8Cc01D3f725156ff4fBBd41ED5272ea775F",
        "topics": [
          "0xd6dfb19b926edb43e8baa6b90ca94e4ad9f9757d0f5d1749efb23c43e7d31213"
        ],
        "data": "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c000000000000000000000000499fd8cc01d3f725156ff4fbbd41ed5272ea775f00000000000000000000000000000000000000000000000000000000674711cf0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x95d3142554646767328b3a4ed7f4de302236054309ed712317d2a6e135f63aa1"
      }
    ],
    "blockNumber": 45996568,
    "cumulativeGasUsed": "3859183",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Test Title"
  ],
  "numDeployments": 1,
  "solcInputHash": "ee47215857d86f12613db5aa1d6288e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockCreated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"name\":\"NewLaunchpad\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"listing\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"NewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"PoolStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"roundID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"WhiteList\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_whiteList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_caps\",\"type\":\"uint256[]\"}],\"name\":\"addWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"poolTitle\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhiteList\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"onlyHolderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minHolderBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timespan\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"finalizePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idoTitle\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"poolTitle\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxContribution\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isWhiteList\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"onlyHolderToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minHolderBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timespan\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolsSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_holderToken\",\"type\":\"address\"}],\"name\":\"setHolderToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minHolderBalance\",\"type\":\"uint256\"}],\"name\":\"setMinHolderAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"}],\"name\":\"setStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timespan\",\"type\":\"uint256\"}],\"name\":\"setTimespan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"}],\"name\":\"setTitle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"startPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"stopPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Launchpad.sol\":\"Launchpad\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0xca2ae13e0610f6a99238dd00b97bd786bc92732dae6d6b9d61f573ec51018310\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9d8da059267bac779a2dbbb9a26c2acf00ca83085e105d62d5d4ef96054a47f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/Launchpad.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Launchpad is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n\\r\\n    struct Pool {\\r\\n        string poolTitle;\\r\\n        uint256 cap;\\r\\n        uint256 price;\\r\\n        uint256 maxContribution;\\r\\n        IERC20 token;\\r\\n        bool isWhiteList;\\r\\n        address onlyHolderToken;\\r\\n        uint256 minHolderBalance;\\r\\n        uint256 startTime;\\r\\n        uint256 timespan;\\r\\n        bool enabled;\\r\\n        bool finished;\\r\\n    }\\r\\n\\r\\n    //uint256 private minHolderBalance = 1e19;\\r\\n    uint32 private constant scaleFactor = 1e8;\\r\\n    uint32 private constant sweepBuffer = 1e5;  //waiting period for sweep\\r\\n    uint256 private constant minSpan = 1e5;\\r\\n\\r\\n    string public idoTitle;\\r\\n\\r\\n    Pool[] public pools;\\r\\n    mapping(uint256 => uint256) public poolsSold;\\r\\n    mapping(uint256 => mapping(address => uint256)) public lockedTokens;\\r\\n    mapping(uint256 => mapping(address => uint256)) public whiteList;\\r\\n\\r\\n    event NewLaunchpad(address creator, address instance, uint256 blockCreated, uint version);\\r\\n    event NewPool(address owner, address listing, uint256 id);\\r\\n    event Swap(uint256 id, uint256 roundID, address sender, uint256 amount, uint256 amt);\\r\\n    event Claim(uint256 id, address claimer, uint256 amount);\\r\\n    event PoolFinished(uint256 id);\\r\\n    event PoolStarted(uint256 id);\\r\\n    event WhiteList(uint256 id);\\r\\n\\r\\n    constructor(string memory _title) Ownable(_msgSender()) {\\r\\n        idoTitle = _title;\\r\\n        emit NewLaunchpad(_msgSender(), address(this), block.timestamp, uint(0));\\r\\n    }\\r\\n\\r\\n    modifier onlyPreLaunch(uint256 _id) {\\r\\n        if (_isManual(_id)) {\\r\\n            require(!pools[_id].enabled, \\\"Pool is already enabled\\\");\\r\\n            require(!pools[_id].finished, \\\"Pool is already completed\\\");\\r\\n        } else {\\r\\n            require(block.timestamp < pools[_id].startTime, \\\"Pool start time has passed\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    //validators\\r\\n\\r\\n    function _isOnlyHolder(uint256 _id) internal view returns (bool){\\r\\n        return (pools[_id].onlyHolderToken != address(0) && pools[_id].minHolderBalance > uint256(0));\\r\\n    }\\r\\n\\r\\n    function _isManual(uint256 _id) internal view returns (bool){\\r\\n        return (pools[_id].startTime == 0 && pools[_id].timespan == 0);\\r\\n    }\\r\\n\\r\\n    //setters\\r\\n\\r\\n    function setMinHolderAmount(uint256 _id, uint256 _minHolderBalance) external onlyOwner onlyPreLaunch(_id) {\\r\\n        pools[_id].minHolderBalance = _minHolderBalance;\\r\\n    }\\r\\n\\r\\n    function setHolderToken(uint256 _id, address _holderToken) external onlyOwner onlyPreLaunch(_id) {\\r\\n        pools[_id].onlyHolderToken = _holderToken;\\r\\n    }\\r\\n\\r\\n    function setStartTime(uint256 _id, uint256 _startTime) external onlyOwner onlyPreLaunch(_id) {\\r\\n        if (_startTime > 0) {\\r\\n            require(_startTime > block.timestamp, \\\"Start time must be in future\\\");\\r\\n        }\\r\\n        pools[_id].startTime = _startTime;\\r\\n    }\\r\\n\\r\\n    function setTimespan(uint256 _id, uint256 _timespan) external onlyOwner onlyPreLaunch(_id) {\\r\\n        if (_timespan > 0) {\\r\\n            require((pools[_id].startTime + _timespan) > block.timestamp, \\\"pool must end in the future, set start time\\\");\\r\\n        }\\r\\n        require(pools[_id].startTime > 0, \\\"Start time must be set first\\\");\\r\\n        uint256 computedTimespan = (pools[_id].startTime > 0 && _timespan < minSpan) ? minSpan : _timespan;\\r\\n        pools[_id].timespan = computedTimespan;\\r\\n    }\\r\\n\\r\\n    function setTitle(string memory _title) external onlyOwner {\\r\\n        idoTitle = _title;\\r\\n    }\\r\\n\\r\\n    function addWhiteList(uint256 id, address[] calldata _whiteList, uint256[] calldata _caps) external onlyOwner onlyPreLaunch(id) {\\r\\n        require(_whiteList.length == _caps.length, \\\"whitelist array length mismatch\\\");\\r\\n        for (uint256 i = 0; i < _whiteList.length; ++i) {\\r\\n            whiteList[id][_whiteList[i]] = _caps[i];\\r\\n        }\\r\\n        emit WhiteList(id);\\r\\n    }\\r\\n\\r\\n    function poolsLength() external view returns (uint256) {\\r\\n        return pools.length;\\r\\n    }\\r\\n\\r\\n    function createPool(\\r\\n        string memory poolTitle,\\r\\n        uint256 cap,\\r\\n        uint256 price,\\r\\n        uint256 maxContribution,\\r\\n        IERC20 token,\\r\\n        bool isWhiteList,\\r\\n        address onlyHolderToken,\\r\\n        uint256 minHolderBalance,\\r\\n        uint256 startTime,\\r\\n        uint256 timespan\\r\\n\\r\\n    ) external onlyOwner returns (uint256) {\\r\\n        require(cap <= token.balanceOf(_msgSender()) && cap > 0, \\\"Cap check\\\");\\r\\n        require(address(token) != address(0), \\\"Pool token cannot be zero address\\\");\\r\\n        require(price > uint256(0), \\\"Price must be greater than 0\\\");\\r\\n        if (startTime > 0) {\\r\\n            require(startTime > block.timestamp, \\\"Start time must be in future\\\");\\r\\n        }\\r\\n        uint256 computedTimespan = (startTime > 0 && timespan < minSpan) ? minSpan : timespan;\\r\\n        Pool memory newPool =\\r\\n                        Pool(\\r\\n                poolTitle,\\r\\n                cap,\\r\\n                price,\\r\\n                maxContribution,\\r\\n                token,\\r\\n                isWhiteList,\\r\\n                onlyHolderToken,\\r\\n                minHolderBalance,\\r\\n                startTime,\\r\\n                computedTimespan,\\r\\n                false,\\r\\n                false\\r\\n            );\\r\\n        pools.push(newPool);\\r\\n        token.transferFrom(_msgSender(), address(this), cap);\\r\\n        emit NewPool(_msgSender(), address(this), pools.length);\\r\\n        return pools.length;\\r\\n    }\\r\\n\\r\\n    function swap(uint256 id, uint256 amount) external payable {\\r\\n        require(amount != 0, \\\"Amount should not be zero\\\");\\r\\n        if (_isManual(id)) {\\r\\n            require(pools[id].enabled, \\\"Pool must be enabled\\\");\\r\\n        } else {\\r\\n            require(pools[id].startTime < block.timestamp && block.timestamp < pools[id].startTime + pools[id].timespan, \\\"TIME: Pool not open\\\");\\r\\n        }\\r\\n        if (_isOnlyHolder(id)) {\\r\\n            require(IERC20(pools[id].onlyHolderToken).balanceOf(_msgSender()) >= pools[id].minHolderBalance, \\\"Miniumum balance not met\\\");\\r\\n        }\\r\\n        if (pools[id].isWhiteList) {\\r\\n            require(whiteList[id][_msgSender()] > 0, \\\"Should be white listed for the pool\\\");\\r\\n        }\\r\\n        require(amount == msg.value, \\\"Amount is not equal msg.value\\\");\\r\\n\\r\\n        Pool memory pool = pools[id];\\r\\n        uint256 left = pool.cap - poolsSold[id];\\r\\n\\r\\n        //console.log(\\\"left1\\\", left);\\r\\n        uint256 curLocked = lockedTokens[id][_msgSender()];\\r\\n        if (left > pool.maxContribution - curLocked) {\\r\\n            left = pool.maxContribution - curLocked;\\r\\n        }\\r\\n        //console.log(\\\"left2\\\", left);\\r\\n        if (pools[id].isWhiteList && left >= whiteList[id][_msgSender()] - curLocked) {\\r\\n            left = whiteList[id][_msgSender()] - curLocked;\\r\\n        }\\r\\n        //console.log(\\\"left3\\\", left);\\r\\n        //console.log(\\\"curLocked\\\", curLocked, \\\"allo\\\", whiteList[id][_msgSender()]);\\r\\n\\r\\n        uint256 amt = (pool.price * amount) / scaleFactor;\\r\\n\\r\\n        //console.log(\\\"amt\\\", amt);\\r\\n        require(left > 0, \\\"Not enough tokens for swap\\\");\\r\\n        uint256 back = 0;\\r\\n        if (left < amt) {\\r\\n            //console.log(\\\"left\\\", left);\\r\\n            //console.log(\\\"amt_\\\", amt);\\r\\n            amt = left;\\r\\n            uint256 newAmount = (amt * scaleFactor) / pool.price;\\r\\n            back = amount - newAmount;\\r\\n            amount = newAmount;\\r\\n        }\\r\\n        lockedTokens[id][_msgSender()] = curLocked + amt;\\r\\n        poolsSold[id] = poolsSold[id] + amt;\\r\\n\\r\\n        (bool success,) = owner().call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Should transfer ethers to the pool creator\\\");\\r\\n        if (back > 0) {\\r\\n            (success,) = _msgSender().call{value: back}(\\\"\\\");\\r\\n            require(success, \\\"Should transfer left ethers back to the user\\\");\\r\\n        }\\r\\n\\r\\n        emit Swap(id, 0, _msgSender(), amount, amt);\\r\\n    }\\r\\n\\r\\n    function startPool(uint256 id) external onlyOwner {\\r\\n        //require(_isManual(id), \\\"Pool is timed and not manual start\\\");\\r\\n        require(!pools[id].enabled, \\\"Pool is already enabled\\\");\\r\\n        require(!pools[id].finished, \\\"Pool is already completed\\\");\\r\\n        pools[id].enabled = true;\\r\\n        emit PoolStarted(id);\\r\\n    }\\r\\n\\r\\n    function stopPool(uint256 id) external onlyOwner {\\r\\n        //require(_isManual(id), \\\"Pool is timed and not manual stop\\\");\\r\\n        require(pools[id].enabled, \\\"Pool is not enabled\\\");\\r\\n        require(!pools[id].finished, \\\"Pool is already completed\\\");\\r\\n        pools[id].enabled = false;\\r\\n        pools[id].finished = true;\\r\\n        emit PoolFinished(id);\\r\\n    }\\r\\n\\r\\n    function finalizePool(uint256 id) external onlyOwner {\\r\\n        //require some time limit\\r\\n        //sweep remaining tokens\\r\\n    }\\r\\n\\r\\n    function claim(uint256 id) external {\\r\\n        if (_isManual(id)) {\\r\\n            require(pools[id].finished, \\\"Cannot claim until pool is finished\\\");\\r\\n        } else {\\r\\n            require(block.timestamp > pools[id].startTime + pools[id].timespan);\\r\\n        }\\r\\n        require(lockedTokens[id][_msgSender()] > 0, \\\"Should have tokens to claim\\\");\\r\\n        uint256 amount = lockedTokens[id][_msgSender()];\\r\\n        lockedTokens[id][_msgSender()] = 0;\\r\\n        pools[id].token.transfer(_msgSender(), amount);\\r\\n        emit Claim(id, _msgSender(), amount);\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x739f853a3795f6c1f64f58e772bb8633760ed6816ad5958a4791670bf36858e7\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051614afc380380614afc83398181016040528101906100329190610364565b61004061012360201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100b25760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100a991906103ee565b60405180910390fd5b6100c18161012b60201b60201c565b5080600190816100d1919061062a565b507fd6dfb19b926edb43e8baa6b90ca94e4ad9f9757d0f5d1749efb23c43e7d3121361010161012360201b60201c565b30426000604051610115949392919061070b565b60405180910390a150610750565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102568261020d565b810181811067ffffffffffffffff821117156102755761027461021e565b5b80604052505050565b60006102886101ef565b9050610294828261024d565b919050565b600067ffffffffffffffff8211156102b4576102b361021e565b5b6102bd8261020d565b9050602081019050919050565b60005b838110156102e85780820151818401526020810190506102cd565b60008484015250505050565b600061030761030284610299565b61027e565b90508281526020810184848401111561032357610322610208565b5b61032e8482856102ca565b509392505050565b600082601f83011261034b5761034a610203565b5b815161035b8482602086016102f4565b91505092915050565b60006020828403121561037a576103796101f9565b5b600082015167ffffffffffffffff811115610398576103976101fe565b5b6103a484828501610336565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103d8826103ad565b9050919050565b6103e8816103cd565b82525050565b600060208201905061040360008301846103df565b92915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061045b57607f821691505b60208210810361046e5761046d610414565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104d67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610499565b6104e08683610499565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061052761052261051d846104f8565b610502565b6104f8565b9050919050565b6000819050919050565b6105418361050c565b61055561054d8261052e565b8484546104a6565b825550505050565b600090565b61056a61055d565b610575818484610538565b505050565b5b818110156105995761058e600082610562565b60018101905061057b565b5050565b601f8211156105de576105af81610474565b6105b884610489565b810160208510156105c7578190505b6105db6105d385610489565b83018261057a565b50505b505050565b600082821c905092915050565b6000610601600019846008026105e3565b1980831691505092915050565b600061061a83836105f0565b9150826002028217905092915050565b61063382610409565b67ffffffffffffffff81111561064c5761064b61021e565b5b6106568254610443565b61066182828561059d565b600060209050601f8311600181146106945760008415610682578287015190505b61068c858261060e565b8655506106f4565b601f1984166106a286610474565b60005b828110156106ca578489015182556001820191506020850194506020810190506106a5565b868310156106e757848901516106e3601f8916826105f0565b8355505b6001600288020188555050505b505050505050565b610705816104f8565b82525050565b600060808201905061072060008301876103df565b61072d60208301866103df565b61073a60408301856106fc565b61074760608301846106fc565b95945050505050565b61439d8061075f6000396000f3fe60806040526004361061012a5760003560e01c80639905bda9116100ab578063baed273a1161006f578063baed273a146103f9578063c5a1f43414610422578063cdbf63b31461044b578063d96073cf14610474578063e09f647614610490578063f2fde38b146104b95761012a565b80639905bda9146102e5578063a901d15c14610322578063ac4afa381461034b578063b37bc8b414610393578063ba278e08146103d05761012a565b8063715018a6116100f2578063715018a61461021457806372910be01461022b57806376735db5146102545780638da5cb5b1461027d57806393b39487146102a85761012a565b80630f4d03571461012f5780631d3a77621461015857806326160272146101955780632716ae66146101c0578063379607f5146101eb575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190612b69565b6104e2565b005b34801561016457600080fd5b5061017f600480360381019061017a9190612bf4565b610685565b60405161018c9190612c43565b60405180910390f35b3480156101a157600080fd5b506101aa6106aa565b6040516101b79190612cee565b60405180910390f35b3480156101cc57600080fd5b506101d5610738565b6040516101e29190612c43565b60405180910390f35b3480156101f757600080fd5b50610212600480360381019061020d9190612b69565b610745565b005b34801561022057600080fd5b50610229610a90565b005b34801561023757600080fd5b50610252600480360381019061024d9190612e45565b610aa4565b005b34801561026057600080fd5b5061027b60048036038101906102769190612e8e565b610abf565b005b34801561028957600080fd5b50610292610d86565b60405161029f9190612edd565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca9190612f6e565b610daf565b6040516102dc9190612c43565b60405180910390f35b3480156102f157600080fd5b5061030c60048036038101906103079190612b69565b61128d565b6040516103199190612c43565b60405180910390f35b34801561032e57600080fd5b5061034960048036038101906103449190612b69565b6112a5565b005b34801561035757600080fd5b50610372600480360381019061036d9190612b69565b61140b565b60405161038a9c9b9a999897969594939291906130d7565b60405180910390f35b34801561039f57600080fd5b506103ba60048036038101906103b59190612bf4565b61156a565b6040516103c79190612c43565b60405180910390f35b3480156103dc57600080fd5b506103f760048036038101906103f29190612e8e565b61158f565b005b34801561040557600080fd5b50610420600480360381019061041b919061324e565b611774565b005b34801561042e57600080fd5b5061044960048036038101906104449190612b69565b611a14565b005b34801561045757600080fd5b50610472600480360381019061046d9190612e8e565b611a1f565b005b61048e60048036038101906104899190612e8e565b611bb8565b005b34801561049c57600080fd5b506104b760048036038101906104b29190612bf4565b612662565b005b3480156104c557600080fd5b506104e060048036038101906104db91906132e3565b612835565b005b6104ea6128bb565b600281815481106104fe576104fd613310565b5b90600052602060002090600a020160090160009054906101000a900460ff1661055c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105539061338b565b60405180910390fd5b600281815481106105705761056f613310565b5b90600052602060002090600a020160090160019054906101000a900460ff16156105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c6906133f7565b60405180910390fd5b6000600282815481106105e5576105e4613310565b5b90600052602060002090600a020160090160006101000a81548160ff02191690831515021790555060016002828154811061062357610622613310565b5b90600052602060002090600a020160090160016101000a81548160ff0219169083151502179055507fbbd128d572b35cebb264fb61023df13364a27c79ee7724c03f071f1a57d9a6858160405161067a9190612c43565b60405180910390a150565b6004602052816000526040600020602052806000526040600020600091509150505481565b600180546106b790613446565b80601f01602080910402602001604051908101604052809291908181526020018280546106e390613446565b80156107305780601f1061070557610100808354040283529160200191610730565b820191906000526020600020905b81548152906001019060200180831161071357829003601f168201915b505050505081565b6000600280549050905090565b61074e81612942565b156107ca576002818154811061076757610766613310565b5b90600052602060002090600a020160090160019054906101000a900460ff166107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc906134e9565b60405180910390fd5b61082c565b600281815481106107de576107dd613310565b5b90600052602060002090600a0201600801546002828154811061080457610803613310565b5b90600052602060002090600a0201600701546108209190613538565b421161082b57600080fd5b5b600060046000838152602001908152602001600020600061084b6129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd906135b8565b60405180910390fd5b60006004600083815260200190815260200160002060006108e56129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006004600084815260200190815260200160002060006109416129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002828154811061099357610992613310565b5b90600052602060002090600a020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6109e86129a4565b836040518363ffffffff1660e01b8152600401610a069291906135d8565b6020604051808303816000875af1158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190613616565b507f3ed1528b0fdc7c5207c1bf935e34a667e13656b9ed165260c522be0bc544f30382610a746129a4565b83604051610a8493929190613643565b60405180910390a15050565b610a986128bb565b610aa260006129ac565b565b610aac6128bb565b8060019081610abb919061381c565b5050565b610ac76128bb565b81610ad181612942565b15610bc15760028181548110610aea57610ae9613310565b5b90600052602060002090600a020160090160009054906101000a900460ff1615610b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b409061393a565b60405180910390fd5b60028181548110610b5d57610b5c613310565b5b90600052602060002090600a020160090160019054906101000a900460ff1615610bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb3906133f7565b60405180910390fd5b610c29565b60028181548110610bd557610bd4613310565b5b90600052602060002090600a0201600701544210610c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1f906139a6565b60405180910390fd5b5b6000821115610ca557428260028581548110610c4857610c47613310565b5b90600052602060002090600a020160070154610c649190613538565b11610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90613a38565b60405180910390fd5b5b600060028481548110610cbb57610cba613310565b5b90600052602060002090600a02016007015411610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490613aa4565b60405180910390fd5b60008060028581548110610d2457610d23613310565b5b90600052602060002090600a020160070154118015610d455750620186a083105b610d4f5782610d54565b620186a05b90508060028581548110610d6b57610d6a613310565b5b90600052602060002090600a02016008018190555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610db96128bb565b8673ffffffffffffffffffffffffffffffffffffffff166370a08231610ddd6129a4565b6040518263ffffffff1660e01b8152600401610df99190612edd565b602060405180830381865afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a9190613ad9565b8a11158015610e49575060008a115b610e88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7f90613b52565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee90613be4565b60405180910390fd5b60008911610f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3190613c50565b60405180910390fd5b6000831115610f8657428311610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c90613cbc565b60405180910390fd5b5b60008084118015610f995750620186a083105b610fa35782610fa8565b620186a05b905060006040518061018001604052808e81526020018d81526020018c81526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff16815260200189151581526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186815260200183815260200160001515815260200160001515815250905060028190806001815401808255809150506001900390600052602060002090600a02016000909190919091506000820151816000019081611075919061381c565b5060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060155610100820151816007015561012082015181600801556101408201518160090160006101000a81548160ff0219169083151502179055506101608201518160090160016101000a81548160ff02191690831515021790555050508873ffffffffffffffffffffffffffffffffffffffff166323b872dd6111ca6129a4565b308f6040518463ffffffff1660e01b81526004016111ea93929190613cdc565b6020604051808303816000875af1158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d9190613616565b507f3e576c516aed7bfaa059edc1ec8f0628a6b75a37c777be146867372226f0bfdd6112576129a4565b3060028054905060405161126d93929190613cdc565b60405180910390a1600280549050925050509a9950505050505050505050565b60036020528060005260406000206000915090505481565b6112ad6128bb565b600281815481106112c1576112c0613310565b5b90600052602060002090600a020160090160009054906101000a900460ff1615611320576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113179061393a565b60405180910390fd5b6002818154811061133457611333613310565b5b90600052602060002090600a020160090160019054906101000a900460ff1615611393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138a906133f7565b60405180910390fd5b6001600282815481106113a9576113a8613310565b5b90600052602060002090600a020160090160006101000a81548160ff0219169083151502179055507f510ad7fdc6893c3992445eb80eeade3af54768c0d8dc2cc8fc57b1c9afa1491d816040516114009190612c43565b60405180910390a150565b6002818154811061141b57600080fd5b90600052602060002090600a020160009150905080600001805461143e90613446565b80601f016020809104026020016040519081016040528092919081815260200182805461146a90613446565b80156114b75780601f1061148c576101008083540402835291602001916114b7565b820191906000526020600020905b81548152906001019060200180831161149a57829003601f168201915b5050505050908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070154908060080154908060090160009054906101000a900460ff16908060090160019054906101000a900460ff1690508c565b6005602052816000526040600020602052806000526040600020600091509150505481565b6115976128bb565b816115a181612942565b1561169157600281815481106115ba576115b9613310565b5b90600052602060002090600a020160090160009054906101000a900460ff1615611619576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116109061393a565b60405180910390fd5b6002818154811061162d5761162c613310565b5b90600052602060002090600a020160090160019054906101000a900460ff161561168c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611683906133f7565b60405180910390fd5b6116f9565b600281815481106116a5576116a4613310565b5b90600052602060002090600a02016007015442106116f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ef906139a6565b60405180910390fd5b5b600082111561174557428211611744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173b90613cbc565b60405180910390fd5b5b816002848154811061175a57611759613310565b5b90600052602060002090600a020160070181905550505050565b61177c6128bb565b8461178681612942565b15611876576002818154811061179f5761179e613310565b5b90600052602060002090600a020160090160009054906101000a900460ff16156117fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f59061393a565b60405180910390fd5b6002818154811061181257611811613310565b5b90600052602060002090600a020160090160019054906101000a900460ff1615611871576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611868906133f7565b60405180910390fd5b6118de565b6002818154811061188a57611889613310565b5b90600052602060002090600a02016007015442106118dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d4906139a6565b60405180910390fd5b5b828290508585905014611926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191d90613d5f565b60405180910390fd5b60005b858590508110156119d45783838281811061194757611946613310565b5b9050602002013560056000898152602001908152602001600020600088888581811061197657611975613310565b5b905060200201602081019061198b91906132e3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806001019050611929565b507f1c795fb57fbd7ee97b1adf0167126e0a37c1f0dd232b1cc17173e096c1f6693786604051611a049190612c43565b60405180910390a1505050505050565b611a1c6128bb565b50565b611a276128bb565b81611a3181612942565b15611b215760028181548110611a4a57611a49613310565b5b90600052602060002090600a020160090160009054906101000a900460ff1615611aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa09061393a565b60405180910390fd5b60028181548110611abd57611abc613310565b5b90600052602060002090600a020160090160019054906101000a900460ff1615611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b13906133f7565b60405180910390fd5b611b89565b60028181548110611b3557611b34613310565b5b90600052602060002090600a0201600701544210611b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7f906139a6565b60405180910390fd5b5b8160028481548110611b9e57611b9d613310565b5b90600052602060002090600a020160060181905550505050565b60008103611bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf290613dcb565b60405180910390fd5b611c0482612942565b15611c805760028281548110611c1d57611c1c613310565b5b90600052602060002090600a020160090160009054906101000a900460ff16611c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7290613e37565b60405180910390fd5b611d48565b4260028381548110611c9557611c94613310565b5b90600052602060002090600a020160070154108015611d08575060028281548110611cc357611cc2613310565b5b90600052602060002090600a02016008015460028381548110611ce957611ce8613310565b5b90600052602060002090600a020160070154611d059190613538565b42105b611d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3e90613ea3565b60405180910390fd5b5b611d5182612a70565b15611e845760028281548110611d6a57611d69613310565b5b90600052602060002090600a02016006015460028381548110611d9057611d8f613310565b5b90600052602060002090600a020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231611de56129a4565b6040518263ffffffff1660e01b8152600401611e019190612edd565b602060405180830381865afa158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e429190613ad9565b1015611e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7a90613f0f565b60405180910390fd5b5b60028281548110611e9857611e97613310565b5b90600052602060002090600a020160040160149054906101000a900460ff1615611f57576000600560008481526020019081526020016000206000611edb6129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4d90613fa1565b60405180910390fd5b5b348114611f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f909061400d565b60405180910390fd5b600060028381548110611faf57611fae613310565b5b90600052602060002090600a020160405180610180016040529081600082018054611fd990613446565b80601f016020809104026020016040519081016040528092919081815260200182805461200590613446565b80156120525780601f1061202757610100808354040283529160200191612052565b820191906000526020600020905b81548152906001019060200180831161203557829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff161515151581526020016009820160019054906101000a900460ff16151515158152505090506000600360008581526020019081526020016000205482602001516121bb919061402d565b905060006004600086815260200190815260200160002060006121dc6129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808360600151612229919061402d565b82111561224357808360600151612240919061402d565b91505b6002858154811061225757612256613310565b5b90600052602060002090600a020160040160149054906101000a900460ff1680156122e457508060056000878152602001908152602001600020600061229b6129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122e0919061402d565b8210155b1561234f57806005600087815260200190815260200160002060006123076129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234c919061402d565b91505b60006305f5e10063ffffffff1685856040015161236c9190614061565b61237691906140d2565b9050600083116123bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b29061414f565b60405180910390fd5b60008184101561240457839150600085604001516305f5e10063ffffffff16846123e59190614061565b6123ef91906140d2565b905080876123fd919061402d565b9150809650505b81836124109190613538565b60046000898152602001908152602001600020600061242d6129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600360008981526020019081526020016000205461248a9190613538565b600360008981526020019081526020016000208190555060006124ab610d86565b73ffffffffffffffffffffffffffffffffffffffff16876040516124ce906141a0565b60006040518083038185875af1925050503d806000811461250b576040519150601f19603f3d011682016040523d82523d6000602084013e612510565b606091505b5050905080612554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254b90614227565b60405180910390fd5b6000821115612611576125656129a4565b73ffffffffffffffffffffffffffffffffffffffff1682604051612588906141a0565b60006040518083038185875af1925050503d80600081146125c5576040519150601f19603f3d011682016040523d82523d6000602084013e6125ca565b606091505b50508091505080612610576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612607906142b9565b60405180910390fd5b5b7f178ad077c936808a2e8e4e7aeae8cba13fe989d668042b2d6ac465bb106da84188600061263d6129a4565b8a87604051612650959493929190614314565b60405180910390a15050505050505050565b61266a6128bb565b8161267481612942565b15612764576002818154811061268d5761268c613310565b5b90600052602060002090600a020160090160009054906101000a900460ff16156126ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e39061393a565b60405180910390fd5b60028181548110612700576126ff613310565b5b90600052602060002090600a020160090160019054906101000a900460ff161561275f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612756906133f7565b60405180910390fd5b6127cc565b6002818154811061277857612777613310565b5b90600052602060002090600a02016007015442106127cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127c2906139a6565b60405180910390fd5b5b81600284815481106127e1576127e0613310565b5b90600052602060002090600a020160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b61283d6128bb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036128af5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016128a69190612edd565b60405180910390fd5b6128b8816129ac565b50565b6128c36129a4565b73ffffffffffffffffffffffffffffffffffffffff166128e1610d86565b73ffffffffffffffffffffffffffffffffffffffff1614612940576129046129a4565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016129379190612edd565b60405180910390fd5b565b6000806002838154811061295957612958613310565b5b90600052602060002090600a02016007015414801561299d575060006002838154811061298957612988613310565b5b90600052602060002090600a020160080154145b9050919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff1660028381548110612a9d57612a9c613310565b5b90600052602060002090600a020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015612b185750600060028381548110612b0457612b03613310565b5b90600052602060002090600a020160060154115b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612b4681612b33565b8114612b5157600080fd5b50565b600081359050612b6381612b3d565b92915050565b600060208284031215612b7f57612b7e612b29565b5b6000612b8d84828501612b54565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bc182612b96565b9050919050565b612bd181612bb6565b8114612bdc57600080fd5b50565b600081359050612bee81612bc8565b92915050565b60008060408385031215612c0b57612c0a612b29565b5b6000612c1985828601612b54565b9250506020612c2a85828601612bdf565b9150509250929050565b612c3d81612b33565b82525050565b6000602082019050612c586000830184612c34565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612c98578082015181840152602081019050612c7d565b60008484015250505050565b6000601f19601f8301169050919050565b6000612cc082612c5e565b612cca8185612c69565b9350612cda818560208601612c7a565b612ce381612ca4565b840191505092915050565b60006020820190508181036000830152612d088184612cb5565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d5282612ca4565b810181811067ffffffffffffffff82111715612d7157612d70612d1a565b5b80604052505050565b6000612d84612b1f565b9050612d908282612d49565b919050565b600067ffffffffffffffff821115612db057612daf612d1a565b5b612db982612ca4565b9050602081019050919050565b82818337600083830152505050565b6000612de8612de384612d95565b612d7a565b905082815260208101848484011115612e0457612e03612d15565b5b612e0f848285612dc6565b509392505050565b600082601f830112612e2c57612e2b612d10565b5b8135612e3c848260208601612dd5565b91505092915050565b600060208284031215612e5b57612e5a612b29565b5b600082013567ffffffffffffffff811115612e7957612e78612b2e565b5b612e8584828501612e17565b91505092915050565b60008060408385031215612ea557612ea4612b29565b5b6000612eb385828601612b54565b9250506020612ec485828601612b54565b9150509250929050565b612ed781612bb6565b82525050565b6000602082019050612ef26000830184612ece565b92915050565b6000612f0382612bb6565b9050919050565b612f1381612ef8565b8114612f1e57600080fd5b50565b600081359050612f3081612f0a565b92915050565b60008115159050919050565b612f4b81612f36565b8114612f5657600080fd5b50565b600081359050612f6881612f42565b92915050565b6000806000806000806000806000806101408b8d031215612f9257612f91612b29565b5b60008b013567ffffffffffffffff811115612fb057612faf612b2e565b5b612fbc8d828e01612e17565b9a50506020612fcd8d828e01612b54565b9950506040612fde8d828e01612b54565b9850506060612fef8d828e01612b54565b97505060806130008d828e01612f21565b96505060a06130118d828e01612f59565b95505060c06130228d828e01612bdf565b94505060e06130338d828e01612b54565b9350506101006130458d828e01612b54565b9250506101206130578d828e01612b54565b9150509295989b9194979a5092959850565b6000819050919050565b600061308e61308961308484612b96565b613069565b612b96565b9050919050565b60006130a082613073565b9050919050565b60006130b282613095565b9050919050565b6130c2816130a7565b82525050565b6130d181612f36565b82525050565b60006101808201905081810360008301526130f2818f612cb5565b9050613101602083018e612c34565b61310e604083018d612c34565b61311b606083018c612c34565b613128608083018b6130b9565b61313560a083018a6130c8565b61314260c0830189612ece565b61314f60e0830188612c34565b61315d610100830187612c34565b61316b610120830186612c34565b6131796101408301856130c8565b6131876101608301846130c8565b9d9c50505050505050505050505050565b600080fd5b600080fd5b60008083601f8401126131b8576131b7612d10565b5b8235905067ffffffffffffffff8111156131d5576131d4613198565b5b6020830191508360208202830111156131f1576131f061319d565b5b9250929050565b60008083601f84011261320e5761320d612d10565b5b8235905067ffffffffffffffff81111561322b5761322a613198565b5b6020830191508360208202830111156132475761324661319d565b5b9250929050565b60008060008060006060868803121561326a57613269612b29565b5b600061327888828901612b54565b955050602086013567ffffffffffffffff81111561329957613298612b2e565b5b6132a5888289016131a2565b9450945050604086013567ffffffffffffffff8111156132c8576132c7612b2e565b5b6132d4888289016131f8565b92509250509295509295909350565b6000602082840312156132f9576132f8612b29565b5b600061330784828501612bdf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f506f6f6c206973206e6f7420656e61626c656400000000000000000000000000600082015250565b6000613375601383612c69565b91506133808261333f565b602082019050919050565b600060208201905081810360008301526133a481613368565b9050919050565b7f506f6f6c20697320616c726561647920636f6d706c6574656400000000000000600082015250565b60006133e1601983612c69565b91506133ec826133ab565b602082019050919050565b60006020820190508181036000830152613410816133d4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061345e57607f821691505b60208210810361347157613470613417565b5b50919050565b7f43616e6e6f7420636c61696d20756e74696c20706f6f6c2069732066696e697360008201527f6865640000000000000000000000000000000000000000000000000000000000602082015250565b60006134d3602383612c69565b91506134de82613477565b604082019050919050565b60006020820190508181036000830152613502816134c6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061354382612b33565b915061354e83612b33565b925082820190508082111561356657613565613509565b5b92915050565b7f53686f756c64206861766520746f6b656e7320746f20636c61696d0000000000600082015250565b60006135a2601b83612c69565b91506135ad8261356c565b602082019050919050565b600060208201905081810360008301526135d181613595565b9050919050565b60006040820190506135ed6000830185612ece565b6135fa6020830184612c34565b9392505050565b60008151905061361081612f42565b92915050565b60006020828403121561362c5761362b612b29565b5b600061363a84828501613601565b91505092915050565b60006060820190506136586000830186612c34565b6136656020830185612ece565b6136726040830184612c34565b949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026136dc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261369f565b6136e6868361369f565b95508019841693508086168417925050509392505050565b600061371961371461370f84612b33565b613069565b612b33565b9050919050565b6000819050919050565b613733836136fe565b61374761373f82613720565b8484546136ac565b825550505050565b600090565b61375c61374f565b61376781848461372a565b505050565b5b8181101561378b57613780600082613754565b60018101905061376d565b5050565b601f8211156137d0576137a18161367a565b6137aa8461368f565b810160208510156137b9578190505b6137cd6137c58561368f565b83018261376c565b50505b505050565b600082821c905092915050565b60006137f3600019846008026137d5565b1980831691505092915050565b600061380c83836137e2565b9150826002028217905092915050565b61382582612c5e565b67ffffffffffffffff81111561383e5761383d612d1a565b5b6138488254613446565b61385382828561378f565b600060209050601f8311600181146138865760008415613874578287015190505b61387e8582613800565b8655506138e6565b601f1984166138948661367a565b60005b828110156138bc57848901518255600182019150602085019450602081019050613897565b868310156138d957848901516138d5601f8916826137e2565b8355505b6001600288020188555050505b505050505050565b7f506f6f6c20697320616c726561647920656e61626c6564000000000000000000600082015250565b6000613924601783612c69565b915061392f826138ee565b602082019050919050565b6000602082019050818103600083015261395381613917565b9050919050565b7f506f6f6c2073746172742074696d652068617320706173736564000000000000600082015250565b6000613990601a83612c69565b915061399b8261395a565b602082019050919050565b600060208201905081810360008301526139bf81613983565b9050919050565b7f706f6f6c206d75737420656e6420696e20746865206675747572652c2073657460008201527f2073746172742074696d65000000000000000000000000000000000000000000602082015250565b6000613a22602b83612c69565b9150613a2d826139c6565b604082019050919050565b60006020820190508181036000830152613a5181613a15565b9050919050565b7f53746172742074696d65206d7573742062652073657420666972737400000000600082015250565b6000613a8e601c83612c69565b9150613a9982613a58565b602082019050919050565b60006020820190508181036000830152613abd81613a81565b9050919050565b600081519050613ad381612b3d565b92915050565b600060208284031215613aef57613aee612b29565b5b6000613afd84828501613ac4565b91505092915050565b7f43617020636865636b0000000000000000000000000000000000000000000000600082015250565b6000613b3c600983612c69565b9150613b4782613b06565b602082019050919050565b60006020820190508181036000830152613b6b81613b2f565b9050919050565b7f506f6f6c20746f6b656e2063616e6e6f74206265207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613bce602183612c69565b9150613bd982613b72565b604082019050919050565b60006020820190508181036000830152613bfd81613bc1565b9050919050565b7f5072696365206d7573742062652067726561746572207468616e203000000000600082015250565b6000613c3a601c83612c69565b9150613c4582613c04565b602082019050919050565b60006020820190508181036000830152613c6981613c2d565b9050919050565b7f53746172742074696d65206d75737420626520696e2066757475726500000000600082015250565b6000613ca6601c83612c69565b9150613cb182613c70565b602082019050919050565b60006020820190508181036000830152613cd581613c99565b9050919050565b6000606082019050613cf16000830186612ece565b613cfe6020830185612ece565b613d0b6040830184612c34565b949350505050565b7f77686974656c697374206172726179206c656e677468206d69736d6174636800600082015250565b6000613d49601f83612c69565b9150613d5482613d13565b602082019050919050565b60006020820190508181036000830152613d7881613d3c565b9050919050565b7f416d6f756e742073686f756c64206e6f74206265207a65726f00000000000000600082015250565b6000613db5601983612c69565b9150613dc082613d7f565b602082019050919050565b60006020820190508181036000830152613de481613da8565b9050919050565b7f506f6f6c206d75737420626520656e61626c6564000000000000000000000000600082015250565b6000613e21601483612c69565b9150613e2c82613deb565b602082019050919050565b60006020820190508181036000830152613e5081613e14565b9050919050565b7f54494d453a20506f6f6c206e6f74206f70656e00000000000000000000000000600082015250565b6000613e8d601383612c69565b9150613e9882613e57565b602082019050919050565b60006020820190508181036000830152613ebc81613e80565b9050919050565b7f4d696e69756d756d2062616c616e6365206e6f74206d65740000000000000000600082015250565b6000613ef9601883612c69565b9150613f0482613ec3565b602082019050919050565b60006020820190508181036000830152613f2881613eec565b9050919050565b7f53686f756c64206265207768697465206c697374656420666f7220746865207060008201527f6f6f6c0000000000000000000000000000000000000000000000000000000000602082015250565b6000613f8b602383612c69565b9150613f9682613f2f565b604082019050919050565b60006020820190508181036000830152613fba81613f7e565b9050919050565b7f416d6f756e74206973206e6f7420657175616c206d73672e76616c7565000000600082015250565b6000613ff7601d83612c69565b915061400282613fc1565b602082019050919050565b6000602082019050818103600083015261402681613fea565b9050919050565b600061403882612b33565b915061404383612b33565b925082820390508181111561405b5761405a613509565b5b92915050565b600061406c82612b33565b915061407783612b33565b925082820261408581612b33565b9150828204841483151761409c5761409b613509565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006140dd82612b33565b91506140e883612b33565b9250826140f8576140f76140a3565b5b828204905092915050565b7f4e6f7420656e6f75676820746f6b656e7320666f722073776170000000000000600082015250565b6000614139601a83612c69565b915061414482614103565b602082019050919050565b600060208201905081810360008301526141688161412c565b9050919050565b600081905092915050565b50565b600061418a60008361416f565b91506141958261417a565b600082019050919050565b60006141ab8261417d565b9150819050919050565b7f53686f756c64207472616e736665722065746865727320746f2074686520706f60008201527f6f6c2063726561746f7200000000000000000000000000000000000000000000602082015250565b6000614211602a83612c69565b915061421c826141b5565b604082019050919050565b6000602082019050818103600083015261424081614204565b9050919050565b7f53686f756c64207472616e73666572206c65667420657468657273206261636b60008201527f20746f2074686520757365720000000000000000000000000000000000000000602082015250565b60006142a3602c83612c69565b91506142ae82614247565b604082019050919050565b600060208201905081810360008301526142d281614296565b9050919050565b6000819050919050565b60006142fe6142f96142f4846142d9565b613069565b612b33565b9050919050565b61430e816142e3565b82525050565b600060a0820190506143296000830188612c34565b6143366020830187614305565b6143436040830186612ece565b6143506060830185612c34565b61435d6080830184612c34565b969550505050505056fea26469706673582212209f77303692b9a7daf821d5c1c80c31a4fd991d014fca7af76fa57a15babd64e264736f6c634300081a0033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c80639905bda9116100ab578063baed273a1161006f578063baed273a146103f9578063c5a1f43414610422578063cdbf63b31461044b578063d96073cf14610474578063e09f647614610490578063f2fde38b146104b95761012a565b80639905bda9146102e5578063a901d15c14610322578063ac4afa381461034b578063b37bc8b414610393578063ba278e08146103d05761012a565b8063715018a6116100f2578063715018a61461021457806372910be01461022b57806376735db5146102545780638da5cb5b1461027d57806393b39487146102a85761012a565b80630f4d03571461012f5780631d3a77621461015857806326160272146101955780632716ae66146101c0578063379607f5146101eb575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190612b69565b6104e2565b005b34801561016457600080fd5b5061017f600480360381019061017a9190612bf4565b610685565b60405161018c9190612c43565b60405180910390f35b3480156101a157600080fd5b506101aa6106aa565b6040516101b79190612cee565b60405180910390f35b3480156101cc57600080fd5b506101d5610738565b6040516101e29190612c43565b60405180910390f35b3480156101f757600080fd5b50610212600480360381019061020d9190612b69565b610745565b005b34801561022057600080fd5b50610229610a90565b005b34801561023757600080fd5b50610252600480360381019061024d9190612e45565b610aa4565b005b34801561026057600080fd5b5061027b60048036038101906102769190612e8e565b610abf565b005b34801561028957600080fd5b50610292610d86565b60405161029f9190612edd565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca9190612f6e565b610daf565b6040516102dc9190612c43565b60405180910390f35b3480156102f157600080fd5b5061030c60048036038101906103079190612b69565b61128d565b6040516103199190612c43565b60405180910390f35b34801561032e57600080fd5b5061034960048036038101906103449190612b69565b6112a5565b005b34801561035757600080fd5b50610372600480360381019061036d9190612b69565b61140b565b60405161038a9c9b9a999897969594939291906130d7565b60405180910390f35b34801561039f57600080fd5b506103ba60048036038101906103b59190612bf4565b61156a565b6040516103c79190612c43565b60405180910390f35b3480156103dc57600080fd5b506103f760048036038101906103f29190612e8e565b61158f565b005b34801561040557600080fd5b50610420600480360381019061041b919061324e565b611774565b005b34801561042e57600080fd5b5061044960048036038101906104449190612b69565b611a14565b005b34801561045757600080fd5b50610472600480360381019061046d9190612e8e565b611a1f565b005b61048e60048036038101906104899190612e8e565b611bb8565b005b34801561049c57600080fd5b506104b760048036038101906104b29190612bf4565b612662565b005b3480156104c557600080fd5b506104e060048036038101906104db91906132e3565b612835565b005b6104ea6128bb565b600281815481106104fe576104fd613310565b5b90600052602060002090600a020160090160009054906101000a900460ff1661055c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105539061338b565b60405180910390fd5b600281815481106105705761056f613310565b5b90600052602060002090600a020160090160019054906101000a900460ff16156105cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c6906133f7565b60405180910390fd5b6000600282815481106105e5576105e4613310565b5b90600052602060002090600a020160090160006101000a81548160ff02191690831515021790555060016002828154811061062357610622613310565b5b90600052602060002090600a020160090160016101000a81548160ff0219169083151502179055507fbbd128d572b35cebb264fb61023df13364a27c79ee7724c03f071f1a57d9a6858160405161067a9190612c43565b60405180910390a150565b6004602052816000526040600020602052806000526040600020600091509150505481565b600180546106b790613446565b80601f01602080910402602001604051908101604052809291908181526020018280546106e390613446565b80156107305780601f1061070557610100808354040283529160200191610730565b820191906000526020600020905b81548152906001019060200180831161071357829003601f168201915b505050505081565b6000600280549050905090565b61074e81612942565b156107ca576002818154811061076757610766613310565b5b90600052602060002090600a020160090160019054906101000a900460ff166107c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bc906134e9565b60405180910390fd5b61082c565b600281815481106107de576107dd613310565b5b90600052602060002090600a0201600801546002828154811061080457610803613310565b5b90600052602060002090600a0201600701546108209190613538565b421161082b57600080fd5b5b600060046000838152602001908152602001600020600061084b6129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116108c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108bd906135b8565b60405180910390fd5b60006004600083815260200190815260200160002060006108e56129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006004600084815260200190815260200160002060006109416129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002828154811061099357610992613310565b5b90600052602060002090600a020160040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6109e86129a4565b836040518363ffffffff1660e01b8152600401610a069291906135d8565b6020604051808303816000875af1158015610a25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a499190613616565b507f3ed1528b0fdc7c5207c1bf935e34a667e13656b9ed165260c522be0bc544f30382610a746129a4565b83604051610a8493929190613643565b60405180910390a15050565b610a986128bb565b610aa260006129ac565b565b610aac6128bb565b8060019081610abb919061381c565b5050565b610ac76128bb565b81610ad181612942565b15610bc15760028181548110610aea57610ae9613310565b5b90600052602060002090600a020160090160009054906101000a900460ff1615610b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b409061393a565b60405180910390fd5b60028181548110610b5d57610b5c613310565b5b90600052602060002090600a020160090160019054906101000a900460ff1615610bbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb3906133f7565b60405180910390fd5b610c29565b60028181548110610bd557610bd4613310565b5b90600052602060002090600a0201600701544210610c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1f906139a6565b60405180910390fd5b5b6000821115610ca557428260028581548110610c4857610c47613310565b5b90600052602060002090600a020160070154610c649190613538565b11610ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9b90613a38565b60405180910390fd5b5b600060028481548110610cbb57610cba613310565b5b90600052602060002090600a02016007015411610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0490613aa4565b60405180910390fd5b60008060028581548110610d2457610d23613310565b5b90600052602060002090600a020160070154118015610d455750620186a083105b610d4f5782610d54565b620186a05b90508060028581548110610d6b57610d6a613310565b5b90600052602060002090600a02016008018190555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610db96128bb565b8673ffffffffffffffffffffffffffffffffffffffff166370a08231610ddd6129a4565b6040518263ffffffff1660e01b8152600401610df99190612edd565b602060405180830381865afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a9190613ad9565b8a11158015610e49575060008a115b610e88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7f90613b52565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610ef7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eee90613be4565b60405180910390fd5b60008911610f3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3190613c50565b60405180910390fd5b6000831115610f8657428311610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c90613cbc565b60405180910390fd5b5b60008084118015610f995750620186a083105b610fa35782610fa8565b620186a05b905060006040518061018001604052808e81526020018d81526020018c81526020018b81526020018a73ffffffffffffffffffffffffffffffffffffffff16815260200189151581526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186815260200183815260200160001515815260200160001515815250905060028190806001815401808255809150506001900390600052602060002090600a02016000909190919091506000820151816000019081611075919061381c565b5060208201518160010155604082015181600201556060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160040160146101000a81548160ff02191690831515021790555060c08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060e08201518160060155610100820151816007015561012082015181600801556101408201518160090160006101000a81548160ff0219169083151502179055506101608201518160090160016101000a81548160ff02191690831515021790555050508873ffffffffffffffffffffffffffffffffffffffff166323b872dd6111ca6129a4565b308f6040518463ffffffff1660e01b81526004016111ea93929190613cdc565b6020604051808303816000875af1158015611209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122d9190613616565b507f3e576c516aed7bfaa059edc1ec8f0628a6b75a37c777be146867372226f0bfdd6112576129a4565b3060028054905060405161126d93929190613cdc565b60405180910390a1600280549050925050509a9950505050505050505050565b60036020528060005260406000206000915090505481565b6112ad6128bb565b600281815481106112c1576112c0613310565b5b90600052602060002090600a020160090160009054906101000a900460ff1615611320576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113179061393a565b60405180910390fd5b6002818154811061133457611333613310565b5b90600052602060002090600a020160090160019054906101000a900460ff1615611393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138a906133f7565b60405180910390fd5b6001600282815481106113a9576113a8613310565b5b90600052602060002090600a020160090160006101000a81548160ff0219169083151502179055507f510ad7fdc6893c3992445eb80eeade3af54768c0d8dc2cc8fc57b1c9afa1491d816040516114009190612c43565b60405180910390a150565b6002818154811061141b57600080fd5b90600052602060002090600a020160009150905080600001805461143e90613446565b80601f016020809104026020016040519081016040528092919081815260200182805461146a90613446565b80156114b75780601f1061148c576101008083540402835291602001916114b7565b820191906000526020600020905b81548152906001019060200180831161149a57829003601f168201915b5050505050908060010154908060020154908060030154908060040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060040160149054906101000a900460ff16908060050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060060154908060070154908060080154908060090160009054906101000a900460ff16908060090160019054906101000a900460ff1690508c565b6005602052816000526040600020602052806000526040600020600091509150505481565b6115976128bb565b816115a181612942565b1561169157600281815481106115ba576115b9613310565b5b90600052602060002090600a020160090160009054906101000a900460ff1615611619576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116109061393a565b60405180910390fd5b6002818154811061162d5761162c613310565b5b90600052602060002090600a020160090160019054906101000a900460ff161561168c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611683906133f7565b60405180910390fd5b6116f9565b600281815481106116a5576116a4613310565b5b90600052602060002090600a02016007015442106116f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ef906139a6565b60405180910390fd5b5b600082111561174557428211611744576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173b90613cbc565b60405180910390fd5b5b816002848154811061175a57611759613310565b5b90600052602060002090600a020160070181905550505050565b61177c6128bb565b8461178681612942565b15611876576002818154811061179f5761179e613310565b5b90600052602060002090600a020160090160009054906101000a900460ff16156117fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f59061393a565b60405180910390fd5b6002818154811061181257611811613310565b5b90600052602060002090600a020160090160019054906101000a900460ff1615611871576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611868906133f7565b60405180910390fd5b6118de565b6002818154811061188a57611889613310565b5b90600052602060002090600a02016007015442106118dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d4906139a6565b60405180910390fd5b5b828290508585905014611926576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191d90613d5f565b60405180910390fd5b60005b858590508110156119d45783838281811061194757611946613310565b5b9050602002013560056000898152602001908152602001600020600088888581811061197657611975613310565b5b905060200201602081019061198b91906132e3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806001019050611929565b507f1c795fb57fbd7ee97b1adf0167126e0a37c1f0dd232b1cc17173e096c1f6693786604051611a049190612c43565b60405180910390a1505050505050565b611a1c6128bb565b50565b611a276128bb565b81611a3181612942565b15611b215760028181548110611a4a57611a49613310565b5b90600052602060002090600a020160090160009054906101000a900460ff1615611aa9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa09061393a565b60405180910390fd5b60028181548110611abd57611abc613310565b5b90600052602060002090600a020160090160019054906101000a900460ff1615611b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b13906133f7565b60405180910390fd5b611b89565b60028181548110611b3557611b34613310565b5b90600052602060002090600a0201600701544210611b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b7f906139a6565b60405180910390fd5b5b8160028481548110611b9e57611b9d613310565b5b90600052602060002090600a020160060181905550505050565b60008103611bfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf290613dcb565b60405180910390fd5b611c0482612942565b15611c805760028281548110611c1d57611c1c613310565b5b90600052602060002090600a020160090160009054906101000a900460ff16611c7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7290613e37565b60405180910390fd5b611d48565b4260028381548110611c9557611c94613310565b5b90600052602060002090600a020160070154108015611d08575060028281548110611cc357611cc2613310565b5b90600052602060002090600a02016008015460028381548110611ce957611ce8613310565b5b90600052602060002090600a020160070154611d059190613538565b42105b611d47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3e90613ea3565b60405180910390fd5b5b611d5182612a70565b15611e845760028281548110611d6a57611d69613310565b5b90600052602060002090600a02016006015460028381548110611d9057611d8f613310565b5b90600052602060002090600a020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231611de56129a4565b6040518263ffffffff1660e01b8152600401611e019190612edd565b602060405180830381865afa158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e429190613ad9565b1015611e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7a90613f0f565b60405180910390fd5b5b60028281548110611e9857611e97613310565b5b90600052602060002090600a020160040160149054906101000a900460ff1615611f57576000600560008481526020019081526020016000206000611edb6129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411611f56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4d90613fa1565b60405180910390fd5b5b348114611f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f909061400d565b60405180910390fd5b600060028381548110611faf57611fae613310565b5b90600052602060002090600a020160405180610180016040529081600082018054611fd990613446565b80601f016020809104026020016040519081016040528092919081815260200182805461200590613446565b80156120525780601f1061202757610100808354040283529160200191612052565b820191906000526020600020905b81548152906001019060200180831161203557829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820160149054906101000a900460ff161515151581526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016006820154815260200160078201548152602001600882015481526020016009820160009054906101000a900460ff161515151581526020016009820160019054906101000a900460ff16151515158152505090506000600360008581526020019081526020016000205482602001516121bb919061402d565b905060006004600086815260200190815260200160002060006121dc6129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808360600151612229919061402d565b82111561224357808360600151612240919061402d565b91505b6002858154811061225757612256613310565b5b90600052602060002090600a020160040160149054906101000a900460ff1680156122e457508060056000878152602001908152602001600020600061229b6129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546122e0919061402d565b8210155b1561234f57806005600087815260200190815260200160002060006123076129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461234c919061402d565b91505b60006305f5e10063ffffffff1685856040015161236c9190614061565b61237691906140d2565b9050600083116123bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b29061414f565b60405180910390fd5b60008184101561240457839150600085604001516305f5e10063ffffffff16846123e59190614061565b6123ef91906140d2565b905080876123fd919061402d565b9150809650505b81836124109190613538565b60046000898152602001908152602001600020600061242d6129a4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600360008981526020019081526020016000205461248a9190613538565b600360008981526020019081526020016000208190555060006124ab610d86565b73ffffffffffffffffffffffffffffffffffffffff16876040516124ce906141a0565b60006040518083038185875af1925050503d806000811461250b576040519150601f19603f3d011682016040523d82523d6000602084013e612510565b606091505b5050905080612554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254b90614227565b60405180910390fd5b6000821115612611576125656129a4565b73ffffffffffffffffffffffffffffffffffffffff1682604051612588906141a0565b60006040518083038185875af1925050503d80600081146125c5576040519150601f19603f3d011682016040523d82523d6000602084013e6125ca565b606091505b50508091505080612610576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612607906142b9565b60405180910390fd5b5b7f178ad077c936808a2e8e4e7aeae8cba13fe989d668042b2d6ac465bb106da84188600061263d6129a4565b8a87604051612650959493929190614314565b60405180910390a15050505050505050565b61266a6128bb565b8161267481612942565b15612764576002818154811061268d5761268c613310565b5b90600052602060002090600a020160090160009054906101000a900460ff16156126ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126e39061393a565b60405180910390fd5b60028181548110612700576126ff613310565b5b90600052602060002090600a020160090160019054906101000a900460ff161561275f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612756906133f7565b60405180910390fd5b6127cc565b6002818154811061277857612777613310565b5b90600052602060002090600a02016007015442106127cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127c2906139a6565b60405180910390fd5b5b81600284815481106127e1576127e0613310565b5b90600052602060002090600a020160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b61283d6128bb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036128af5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016128a69190612edd565b60405180910390fd5b6128b8816129ac565b50565b6128c36129a4565b73ffffffffffffffffffffffffffffffffffffffff166128e1610d86565b73ffffffffffffffffffffffffffffffffffffffff1614612940576129046129a4565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016129379190612edd565b60405180910390fd5b565b6000806002838154811061295957612958613310565b5b90600052602060002090600a02016007015414801561299d575060006002838154811061298957612988613310565b5b90600052602060002090600a020160080154145b9050919050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008073ffffffffffffffffffffffffffffffffffffffff1660028381548110612a9d57612a9c613310565b5b90600052602060002090600a020160050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015612b185750600060028381548110612b0457612b03613310565b5b90600052602060002090600a020160060154115b9050919050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612b4681612b33565b8114612b5157600080fd5b50565b600081359050612b6381612b3d565b92915050565b600060208284031215612b7f57612b7e612b29565b5b6000612b8d84828501612b54565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612bc182612b96565b9050919050565b612bd181612bb6565b8114612bdc57600080fd5b50565b600081359050612bee81612bc8565b92915050565b60008060408385031215612c0b57612c0a612b29565b5b6000612c1985828601612b54565b9250506020612c2a85828601612bdf565b9150509250929050565b612c3d81612b33565b82525050565b6000602082019050612c586000830184612c34565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612c98578082015181840152602081019050612c7d565b60008484015250505050565b6000601f19601f8301169050919050565b6000612cc082612c5e565b612cca8185612c69565b9350612cda818560208601612c7a565b612ce381612ca4565b840191505092915050565b60006020820190508181036000830152612d088184612cb5565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612d5282612ca4565b810181811067ffffffffffffffff82111715612d7157612d70612d1a565b5b80604052505050565b6000612d84612b1f565b9050612d908282612d49565b919050565b600067ffffffffffffffff821115612db057612daf612d1a565b5b612db982612ca4565b9050602081019050919050565b82818337600083830152505050565b6000612de8612de384612d95565b612d7a565b905082815260208101848484011115612e0457612e03612d15565b5b612e0f848285612dc6565b509392505050565b600082601f830112612e2c57612e2b612d10565b5b8135612e3c848260208601612dd5565b91505092915050565b600060208284031215612e5b57612e5a612b29565b5b600082013567ffffffffffffffff811115612e7957612e78612b2e565b5b612e8584828501612e17565b91505092915050565b60008060408385031215612ea557612ea4612b29565b5b6000612eb385828601612b54565b9250506020612ec485828601612b54565b9150509250929050565b612ed781612bb6565b82525050565b6000602082019050612ef26000830184612ece565b92915050565b6000612f0382612bb6565b9050919050565b612f1381612ef8565b8114612f1e57600080fd5b50565b600081359050612f3081612f0a565b92915050565b60008115159050919050565b612f4b81612f36565b8114612f5657600080fd5b50565b600081359050612f6881612f42565b92915050565b6000806000806000806000806000806101408b8d031215612f9257612f91612b29565b5b60008b013567ffffffffffffffff811115612fb057612faf612b2e565b5b612fbc8d828e01612e17565b9a50506020612fcd8d828e01612b54565b9950506040612fde8d828e01612b54565b9850506060612fef8d828e01612b54565b97505060806130008d828e01612f21565b96505060a06130118d828e01612f59565b95505060c06130228d828e01612bdf565b94505060e06130338d828e01612b54565b9350506101006130458d828e01612b54565b9250506101206130578d828e01612b54565b9150509295989b9194979a5092959850565b6000819050919050565b600061308e61308961308484612b96565b613069565b612b96565b9050919050565b60006130a082613073565b9050919050565b60006130b282613095565b9050919050565b6130c2816130a7565b82525050565b6130d181612f36565b82525050565b60006101808201905081810360008301526130f2818f612cb5565b9050613101602083018e612c34565b61310e604083018d612c34565b61311b606083018c612c34565b613128608083018b6130b9565b61313560a083018a6130c8565b61314260c0830189612ece565b61314f60e0830188612c34565b61315d610100830187612c34565b61316b610120830186612c34565b6131796101408301856130c8565b6131876101608301846130c8565b9d9c50505050505050505050505050565b600080fd5b600080fd5b60008083601f8401126131b8576131b7612d10565b5b8235905067ffffffffffffffff8111156131d5576131d4613198565b5b6020830191508360208202830111156131f1576131f061319d565b5b9250929050565b60008083601f84011261320e5761320d612d10565b5b8235905067ffffffffffffffff81111561322b5761322a613198565b5b6020830191508360208202830111156132475761324661319d565b5b9250929050565b60008060008060006060868803121561326a57613269612b29565b5b600061327888828901612b54565b955050602086013567ffffffffffffffff81111561329957613298612b2e565b5b6132a5888289016131a2565b9450945050604086013567ffffffffffffffff8111156132c8576132c7612b2e565b5b6132d4888289016131f8565b92509250509295509295909350565b6000602082840312156132f9576132f8612b29565b5b600061330784828501612bdf565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f506f6f6c206973206e6f7420656e61626c656400000000000000000000000000600082015250565b6000613375601383612c69565b91506133808261333f565b602082019050919050565b600060208201905081810360008301526133a481613368565b9050919050565b7f506f6f6c20697320616c726561647920636f6d706c6574656400000000000000600082015250565b60006133e1601983612c69565b91506133ec826133ab565b602082019050919050565b60006020820190508181036000830152613410816133d4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061345e57607f821691505b60208210810361347157613470613417565b5b50919050565b7f43616e6e6f7420636c61696d20756e74696c20706f6f6c2069732066696e697360008201527f6865640000000000000000000000000000000000000000000000000000000000602082015250565b60006134d3602383612c69565b91506134de82613477565b604082019050919050565b60006020820190508181036000830152613502816134c6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061354382612b33565b915061354e83612b33565b925082820190508082111561356657613565613509565b5b92915050565b7f53686f756c64206861766520746f6b656e7320746f20636c61696d0000000000600082015250565b60006135a2601b83612c69565b91506135ad8261356c565b602082019050919050565b600060208201905081810360008301526135d181613595565b9050919050565b60006040820190506135ed6000830185612ece565b6135fa6020830184612c34565b9392505050565b60008151905061361081612f42565b92915050565b60006020828403121561362c5761362b612b29565b5b600061363a84828501613601565b91505092915050565b60006060820190506136586000830186612c34565b6136656020830185612ece565b6136726040830184612c34565b949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026136dc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261369f565b6136e6868361369f565b95508019841693508086168417925050509392505050565b600061371961371461370f84612b33565b613069565b612b33565b9050919050565b6000819050919050565b613733836136fe565b61374761373f82613720565b8484546136ac565b825550505050565b600090565b61375c61374f565b61376781848461372a565b505050565b5b8181101561378b57613780600082613754565b60018101905061376d565b5050565b601f8211156137d0576137a18161367a565b6137aa8461368f565b810160208510156137b9578190505b6137cd6137c58561368f565b83018261376c565b50505b505050565b600082821c905092915050565b60006137f3600019846008026137d5565b1980831691505092915050565b600061380c83836137e2565b9150826002028217905092915050565b61382582612c5e565b67ffffffffffffffff81111561383e5761383d612d1a565b5b6138488254613446565b61385382828561378f565b600060209050601f8311600181146138865760008415613874578287015190505b61387e8582613800565b8655506138e6565b601f1984166138948661367a565b60005b828110156138bc57848901518255600182019150602085019450602081019050613897565b868310156138d957848901516138d5601f8916826137e2565b8355505b6001600288020188555050505b505050505050565b7f506f6f6c20697320616c726561647920656e61626c6564000000000000000000600082015250565b6000613924601783612c69565b915061392f826138ee565b602082019050919050565b6000602082019050818103600083015261395381613917565b9050919050565b7f506f6f6c2073746172742074696d652068617320706173736564000000000000600082015250565b6000613990601a83612c69565b915061399b8261395a565b602082019050919050565b600060208201905081810360008301526139bf81613983565b9050919050565b7f706f6f6c206d75737420656e6420696e20746865206675747572652c2073657460008201527f2073746172742074696d65000000000000000000000000000000000000000000602082015250565b6000613a22602b83612c69565b9150613a2d826139c6565b604082019050919050565b60006020820190508181036000830152613a5181613a15565b9050919050565b7f53746172742074696d65206d7573742062652073657420666972737400000000600082015250565b6000613a8e601c83612c69565b9150613a9982613a58565b602082019050919050565b60006020820190508181036000830152613abd81613a81565b9050919050565b600081519050613ad381612b3d565b92915050565b600060208284031215613aef57613aee612b29565b5b6000613afd84828501613ac4565b91505092915050565b7f43617020636865636b0000000000000000000000000000000000000000000000600082015250565b6000613b3c600983612c69565b9150613b4782613b06565b602082019050919050565b60006020820190508181036000830152613b6b81613b2f565b9050919050565b7f506f6f6c20746f6b656e2063616e6e6f74206265207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000613bce602183612c69565b9150613bd982613b72565b604082019050919050565b60006020820190508181036000830152613bfd81613bc1565b9050919050565b7f5072696365206d7573742062652067726561746572207468616e203000000000600082015250565b6000613c3a601c83612c69565b9150613c4582613c04565b602082019050919050565b60006020820190508181036000830152613c6981613c2d565b9050919050565b7f53746172742074696d65206d75737420626520696e2066757475726500000000600082015250565b6000613ca6601c83612c69565b9150613cb182613c70565b602082019050919050565b60006020820190508181036000830152613cd581613c99565b9050919050565b6000606082019050613cf16000830186612ece565b613cfe6020830185612ece565b613d0b6040830184612c34565b949350505050565b7f77686974656c697374206172726179206c656e677468206d69736d6174636800600082015250565b6000613d49601f83612c69565b9150613d5482613d13565b602082019050919050565b60006020820190508181036000830152613d7881613d3c565b9050919050565b7f416d6f756e742073686f756c64206e6f74206265207a65726f00000000000000600082015250565b6000613db5601983612c69565b9150613dc082613d7f565b602082019050919050565b60006020820190508181036000830152613de481613da8565b9050919050565b7f506f6f6c206d75737420626520656e61626c6564000000000000000000000000600082015250565b6000613e21601483612c69565b9150613e2c82613deb565b602082019050919050565b60006020820190508181036000830152613e5081613e14565b9050919050565b7f54494d453a20506f6f6c206e6f74206f70656e00000000000000000000000000600082015250565b6000613e8d601383612c69565b9150613e9882613e57565b602082019050919050565b60006020820190508181036000830152613ebc81613e80565b9050919050565b7f4d696e69756d756d2062616c616e6365206e6f74206d65740000000000000000600082015250565b6000613ef9601883612c69565b9150613f0482613ec3565b602082019050919050565b60006020820190508181036000830152613f2881613eec565b9050919050565b7f53686f756c64206265207768697465206c697374656420666f7220746865207060008201527f6f6f6c0000000000000000000000000000000000000000000000000000000000602082015250565b6000613f8b602383612c69565b9150613f9682613f2f565b604082019050919050565b60006020820190508181036000830152613fba81613f7e565b9050919050565b7f416d6f756e74206973206e6f7420657175616c206d73672e76616c7565000000600082015250565b6000613ff7601d83612c69565b915061400282613fc1565b602082019050919050565b6000602082019050818103600083015261402681613fea565b9050919050565b600061403882612b33565b915061404383612b33565b925082820390508181111561405b5761405a613509565b5b92915050565b600061406c82612b33565b915061407783612b33565b925082820261408581612b33565b9150828204841483151761409c5761409b613509565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006140dd82612b33565b91506140e883612b33565b9250826140f8576140f76140a3565b5b828204905092915050565b7f4e6f7420656e6f75676820746f6b656e7320666f722073776170000000000000600082015250565b6000614139601a83612c69565b915061414482614103565b602082019050919050565b600060208201905081810360008301526141688161412c565b9050919050565b600081905092915050565b50565b600061418a60008361416f565b91506141958261417a565b600082019050919050565b60006141ab8261417d565b9150819050919050565b7f53686f756c64207472616e736665722065746865727320746f2074686520706f60008201527f6f6c2063726561746f7200000000000000000000000000000000000000000000602082015250565b6000614211602a83612c69565b915061421c826141b5565b604082019050919050565b6000602082019050818103600083015261424081614204565b9050919050565b7f53686f756c64207472616e73666572206c65667420657468657273206261636b60008201527f20746f2074686520757365720000000000000000000000000000000000000000602082015250565b60006142a3602c83612c69565b91506142ae82614247565b604082019050919050565b600060208201905081810360008301526142d281614296565b9050919050565b6000819050919050565b60006142fe6142f96142f4846142d9565b613069565b612b33565b9050919050565b61430e816142e3565b82525050565b600060a0820190506143296000830188612c34565b6143366020830187614305565b6143436040830186612ece565b6143506060830185612c34565b61435d6080830184612c34565b969550505050505056fea26469706673582212209f77303692b9a7daf821d5c1c80c31a4fd991d014fca7af76fa57a15babd64e264736f6c634300081a0033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1166,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "idoTitle",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1170,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "pools",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Pool)1155_storage)dyn_storage"
      },
      {
        "astId": 1174,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "poolsSold",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1180,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "lockedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1186,
        "contract": "contracts/Launchpad.sol:Launchpad",
        "label": "whiteList",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Pool)1155_storage)dyn_storage": {
        "base": "t_struct(Pool)1155_storage",
        "encoding": "dynamic_array",
        "label": "struct Launchpad.Pool[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)315": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Pool)1155_storage": {
        "encoding": "inplace",
        "label": "struct Launchpad.Pool",
        "members": [
          {
            "astId": 1131,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "poolTitle",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1133,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "cap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1135,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1137,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "maxContribution",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1140,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "token",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IERC20)315"
          },
          {
            "astId": 1142,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "isWhiteList",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1144,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "onlyHolderToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 1146,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "minHolderBalance",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1148,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "startTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1150,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "timespan",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 1152,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "enabled",
            "offset": 0,
            "slot": "9",
            "type": "t_bool"
          },
          {
            "astId": 1154,
            "contract": "contracts/Launchpad.sol:Launchpad",
            "label": "finished",
            "offset": 1,
            "slot": "9",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}